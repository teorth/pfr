import Mathlib.MeasureTheory.Constructions.Prod.Basic
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import PFR.ForMathlib.FiniteMeasureProd
import PFR.ForMathlib.CompactProb
import PFR.Mathlib.Topology.Bases

/-!
# Continuity of products of probability measures on finite types
-/

open MeasureTheory Topology Metric Filter Set ENNReal NNReal
open scoped Topology ENNReal NNReal BoundedContinuousFunction BigOperators

namespace MeasureTheory

/-- Probability measures on a finite space tend to a limit if and only if the probability masses
of all points tend to the corresponding limits. -/
lemma ProbabilityMeasure.tendsto_iff_forall_apply_tendsto {Œπ Œ± : Type*} {L : Filter Œπ} [Finite Œ±]
    [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) :
    Tendsto Œºs L (ùìù Œº) ‚Üî ‚àÄ a, Tendsto (Œºs ¬∑ {a}) L (ùìù (Œº {a})) := by
  constructor <;> intro h
  ¬∑ exact fun a ‚Ü¶ ((continuous_pmf_apply a).continuousAt (x := Œº)).tendsto.comp h
  ¬∑ apply ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto.mpr
    intro f
    apply tendsto_lintegral_of_forall_of_finite
    intro a
    -- TODO: rename `ENNReal.continuous_coe` to `ENNReal.continuous_ofNNReal`?
    convert ENNReal.continuous_coe.continuousAt.tendsto.comp (h a)
    simp only [Function.comp_apply, ne_eq, ennreal_coeFn_eq_coeFn_toMeasure, coe_toNNReal]
    simp only [ne_eq, ennreal_coeFn_eq_coeFn_toMeasure]

/-- If probability measures on two finite spaces tend to limits, then the products of them
on the product space tend to the product of the limits.
TODO: In Mathlib, this should be done on all separable metrizable spaces. -/
lemma ProbabilityMeasure.tendsto_prod_of_tendsto_of_tendsto
    {Œπ : Type*} {L : Filter Œπ} {Œ± Œ≤ : Type*}
    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
    [Finite Œ≤] [TopologicalSpace Œ≤] [DiscreteTopology Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤]
    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) (Œºs_lim : Tendsto Œºs L (ùìù Œº))
    (ŒΩs : Œπ ‚Üí ProbabilityMeasure Œ≤) (ŒΩ : ProbabilityMeasure Œ≤) (ŒΩs_lim : Tendsto ŒΩs L (ùìù ŒΩ)) :
    Tendsto (fun i ‚Ü¶ (Œºs i).prod (ŒΩs i)) L (ùìù (Œº.prod ŒΩ)) := by
  apply (ProbabilityMeasure.tendsto_iff_forall_apply_tendsto _ _).mpr
  intro ab
  have aux : {ab} = {ab.1} √óÀ¢ {ab.2} := toFinset_inj.mp rfl
  simp_rw [aux, prod_prod]
  have obs_Œºs := ((continuous_pmf_apply ab.1).continuousAt (x := Œº)).tendsto.comp Œºs_lim
  have obs_ŒΩs := ((continuous_pmf_apply ab.2).continuousAt (x := ŒΩ)).tendsto.comp ŒΩs_lim
  exact tendsto_mul.comp (Tendsto.prod_mk_nhds obs_Œºs obs_ŒΩs)

-- TODO: Prove more generally in Mathlib.
instance t1Space_probabilityMeasure_of_finite {Œ± : Type*}
    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±] :
    T1Space (ProbabilityMeasure Œ±) := by
  cases nonempty_fintype Œ±; exact probabilityMeasureHomeoStdSimplex.symm.t1Space

/-- The product of two probability measures on finite spaces depend continuously on the two
probability measures.
TODO: In Mathlib, this should be done on all separable metrizable spaces. -/
lemma ProbabilityMeasure.continuous_prod_of_finite {Œ± Œ≤ : Type*}
    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
    [Finite Œ≤] [TopologicalSpace Œ≤] [DiscreteTopology Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤] :
    Continuous (fun (‚ü®Œº, ŒΩ‚ü© : ProbabilityMeasure Œ± √ó ProbabilityMeasure Œ≤) ‚Ü¶ (Œº.prod ŒΩ)) := by
  rw [continuous_iff_continuousAt]
  intro ŒºŒΩ
  apply continuousAt_of_tendsto_nhds (y := ŒºŒΩ.1.prod ŒºŒΩ.2)
  apply ProbabilityMeasure.tendsto_prod_of_tendsto_of_tendsto
  ¬∑ apply continuous_fst.tendsto
  ¬∑ apply continuous_snd.tendsto

end MeasureTheory -- namespace
