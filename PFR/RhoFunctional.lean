import PFR.ForMathlib.CompactProb
import PFR.ForMathlib.Entropy.RuzsaDist
import PFR.Kullback
import Mathlib.MeasureTheory.Measure.AEMeasurable
import PFR.Mathlib.Probability.Independence.FourVariables
import PFR.Mathlib.Probability.Independence.ThreeVariables
import PFR.FirstEstimate
import PFR.ImprovedPFR


/-!
# The rho functional

Definition of the rho functional and basic facts

## Main definitions:

## Main results

-/


/- In this file the power notation will always mean the base and exponent are real numbers. -/
local macro_rules | `($x ^ $y) => `(HPow.hPow ($x : ‚Ñù) ($y : ‚Ñù))


open MeasureTheory ProbabilityTheory Real Set Function Measure Filter
open scoped Pointwise ENNReal Topology
universe uG

section

variable {G : Type uG} [AddCommGroup G] [Fintype G] [hGm : MeasurableSpace G]
[DiscreteMeasurableSpace G] {Œ© : Type*} [MeasurableSpace Œ©] {Œº : Measure Œ©}
{X Y Z : Œ© ‚Üí G} {A : Finset G}


/-- The set of possible values of $D_{KL}(X \Vert U_A + T)$, where $U_A$ is uniform on $A$ and
$T$ ranges over $G$-valued random variables independent of $U_A$. We also require an absolute
continuity condition so that the KL divergence makes sense in `‚Ñù`.

To avoid universe issues, we express this using measures on `G`, but the equivalence with the
above point of view follows from `rhoMinus_le` below. -/
noncomputable def rhoMinusSet
    (X : Œ© ‚Üí G) (A : Finset G) (Œº : Measure Œ©) : Set ‚Ñù :=
  {x : ‚Ñù | ‚àÉ (Œº' : Measure G), IsProbabilityMeasure Œº' ‚àß
    (‚àÄ y, (Œº'.prod (uniformOn A)).map (Prod.fst + Prod.snd) {y} = 0 ‚Üí Œº.map X {y} = 0) ‚àß
    x = KL[X ; Œº # Prod.fst + Prod.snd ; Œº'.prod (uniformOn A)]}

lemma map_prod_uniformOn_ne_zero {y : G} (hA : A.Nonempty)
    {Œº : Measure G} [IsProbabilityMeasure Œº] (hŒº : ‚àÄ x, Œº {x} ‚â† 0) :
    (Œº.prod (uniformOn A)).map (Prod.fst + Prod.snd) {y} ‚â† 0 := by
  intro h
  obtain ‚ü®a, ha‚ü© : ‚àÉ x, x ‚àà A := by exact hA
  let ŒΩ := uniformOn (A : Set G)
  have : IsProbabilityMeasure ŒΩ :=
    uniformOn_isProbabilityMeasure A.finite_toSet hA
  have h_indep : IndepFun Prod.fst Prod.snd (Œº.prod ŒΩ) := ProbabilityTheory.indepFun_fst_snd
  rw [h_indep.map_add_singleton_eq_sum measurable_fst measurable_snd,
    Finset.sum_eq_zero_iff_of_nonneg (fun i _ ‚Ü¶ by simp)] at h
  specialize h a (Finset.mem_univ a)
  have : (Measure.map Prod.snd (Œº.prod ŒΩ)) {a} ‚â† 0 := by
    simp [Measure.map_snd_prod, ŒΩ, uniformOn_apply_singleton_of_mem (by exact ha) A.finite_toSet]
  simp only [mul_eq_zero, this, false_or, Measure.map_fst_prod] at h
  simp only [measure_univ, one_smul] at h
  exact hŒº (y - a) h

lemma nonempty_rhoMinusSet [IsZeroOrProbabilityMeasure Œº] (hA : A.Nonempty) :
    Set.Nonempty (rhoMinusSet X A Œº) := by
  rcases eq_zero_or_isProbabilityMeasure Œº with hŒº | hŒº
  ¬∑ refine ‚ü®0, ‚ü®uniformOn (A : Set G), uniformOn_isProbabilityMeasure A.finite_toSet hA,
      by simp [hŒº], by simp [hŒº, KLDiv]‚ü©‚ü©
  set Œº' := uniformOn (univ : Set G) with hŒº'
  have : IsProbabilityMeasure Œº' := uniformOn_isProbabilityMeasure finite_univ univ_nonempty
  refine ‚ü®_, ‚ü®Œº', this, fun y hy ‚Ü¶ (map_prod_uniformOn_ne_zero hA ?_ hy).elim, rfl‚ü©‚ü©
  intro x
  simp [hŒº', uniformOn_apply_singleton_of_mem (mem_univ _) finite_univ]

lemma nonneg_of_mem_rhoMinusSet [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) {x : ‚Ñù} (hx : x ‚àà rhoMinusSet X A Œº) : 0 ‚â§ x := by
  rcases hx with ‚ü®Œº, hŒº, habs, rfl‚ü©
  exact KLDiv_nonneg hX (by fun_prop) habs

lemma bddBelow_rhoMinusSet [IsZeroOrProbabilityMeasure Œº] (hX : Measurable X) :
    BddBelow (rhoMinusSet X A Œº) :=
  ‚ü®0, fun _ hx ‚Ü¶ nonneg_of_mem_rhoMinusSet hX hx‚ü©

lemma rhoMinusSet_eq_of_identDistrib {Œ©' : Type*} [MeasurableSpace Œ©'] {Œº' : Measure Œ©'}
    {X' : Œ©' ‚Üí G}
    (h : IdentDistrib X X' Œº Œº') : rhoMinusSet X A Œº = rhoMinusSet X' A Œº' := by
  have I (Œº'' : Measure G) : KL[X ; Œº # Prod.fst + Prod.snd ; Œº''.prod (uniformOn (A : Set G))] =
      KL[X' ; Œº' # Prod.fst + Prod.snd ; Œº''.prod (uniformOn (A : Set G))] := by
    apply ProbabilityTheory.IdentDistrib.KLDiv_eq _ _ h
    apply IdentDistrib.refl (by fun_prop)
  simp only [rhoMinusSet, h.map_eq, I]

/-- For any $G$-valued random variable $X$, we define $\rho^-(X)$ to be the infimum of
$D_{KL}(X \Vert U_A + T)$, where $U_A$ is uniform on $A$ and $T$ ranges over $G$-valued random
variables independent of $U_A$. -/
noncomputable def rhoMinus (X : Œ© ‚Üí G) (A : Finset G) (Œº : Measure Œ©) : ‚Ñù :=
  sInf (rhoMinusSet X A Œº)

@[inherit_doc rhoMinus] notation3:max "œÅ‚Åª[" X " ; " Œº " # " A "]" => rhoMinus X A Œº

@[inherit_doc rhoMinus] notation3:max "œÅ‚Åª[" X " # " A "]" => rhoMinus X A volume

lemma rhoMinus_eq_of_identDistrib {Œ©' : Type*} [MeasurableSpace Œ©'] {X' : Œ©' ‚Üí G} {Œº' : Measure Œ©'}
    (h : IdentDistrib X X' Œº Œº') : œÅ‚Åª[X ; Œº # A] = œÅ‚Åª[X' ; Œº' # A] := by
  simp [rhoMinus, rhoMinusSet_eq_of_identDistrib h]

lemma rhoMinus_le_def [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) {Œº' : Measure G} [IsProbabilityMeasure Œº']
    (habs : ‚àÄ y, (Œº'.prod (uniformOn A)).map (Prod.fst + Prod.snd) {y} = 0 ‚Üí Œº.map X {y} = 0) :
    œÅ‚Åª[X ; Œº # A] ‚â§ KL[X ; Œº # Prod.fst + Prod.snd ; Œº'.prod (uniformOn A)] := by
  apply csInf_le (bddBelow_rhoMinusSet hX)
  exact ‚ü®Œº', by infer_instance, habs, rfl‚ü©

lemma rhoMinus_le [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) (hA : A.Nonempty)
    {Œ©' : Type*} [MeasurableSpace Œ©'] {T : Œ©' ‚Üí G} {U : Œ©' ‚Üí G} {Œº' : Measure Œ©'}
    [IsProbabilityMeasure Œº'] (hunif : IsUniform A U Œº') (hT : Measurable T)
    (hU : Measurable U) (h_indep : IndepFun T U Œº')
    (habs : ‚àÄ y, (Œº'.map (T + U)) {y} = 0 ‚Üí Œº.map X {y} = 0) :
    œÅ‚Åª[X ; Œº # A] ‚â§ KL[X ; Œº # T + U ; Œº'] := by
  have : IsProbabilityMeasure (Measure.map T Œº') := isProbabilityMeasure_map hT.aemeasurable
  have : IsProbabilityMeasure (uniformOn (A : Set G)) :=
    uniformOn_isProbabilityMeasure A.finite_toSet hA
  have E : Measure.map U Œº' = uniformOn (A : Set G) := hunif.map_eq_uniformOn hU A.finite_toSet hA
  have M : (Measure.map (Prod.fst + Prod.snd) ((Measure.map T Œº').prod (uniformOn ‚ÜëA))) =
      (Measure.map (T + U) Œº') := by
    ext s _
    rw [h_indep.map_add_eq_sum hT hU]
    have : IndepFun Prod.fst Prod.snd ((Measure.map T Œº').prod (uniformOn (A : Set G))) :=
      ProbabilityTheory.indepFun_fst_snd
    rw [this.map_add_eq_sum measurable_fst measurable_snd,
      Measure.map_fst_prod, Measure.map_snd_prod]
    simp [E]
  apply csInf_le (bddBelow_rhoMinusSet hX)
  simp only [rhoMinusSet, Set.mem_setOf_eq]
  exact ‚ü®Œº'.map T, isProbabilityMeasure_map hT.aemeasurable, by rwa [M], by simp [KLDiv, M]‚ü©

/-- We have $\rho^-(X) \geq 0$. -/
lemma rhoMinus_nonneg [IsZeroOrProbabilityMeasure Œº]
    {X : Œ© ‚Üí G} {A : Finset G} (hX : Measurable X) : 0 ‚â§ œÅ‚Åª[X ; Œº # A] :=
  Real.sInf_nonneg (fun _ hx ‚Ü¶ nonneg_of_mem_rhoMinusSet hX hx)

lemma rhoMinus_zero_measure (hP : Œº = 0)
    {X : Œ© ‚Üí G} {A : Finset G} : œÅ‚Åª[X ; Œº # A] = 0 := by
  have : ‚àÉ (Œº' : Measure G), IsProbabilityMeasure Œº' :=
    ‚ü®uniformOn Set.univ, uniformOn_isProbabilityMeasure finite_univ univ_nonempty‚ü©
  simp [rhoMinus, rhoMinusSet, hP, this, KLDiv]

private lemma rhoMinus_continuous_aux1 (hX : Measurable X) (hA : A.Nonempty)
    {r : ‚Ñù} (hr : œÅ‚Åª[X ; Œº # A] < r)
    [IsProbabilityMeasure Œº] [TopologicalSpace G] [DiscreteTopology G] :
    ‚àÉ (Œº' : Measure G), IsProbabilityMeasure Œº' ‚àß (‚àÄ y, 0 < Œº' {y}) ‚àß
    KL[X ; Œº # Prod.fst + Prod.snd ; Œº'.prod (uniformOn A)] < r := by
  rcases (csInf_lt_iff (bddBelow_rhoMinusSet hX) (nonempty_rhoMinusSet hA)).1 hr
    with ‚ü®-, ‚ü®Œº‚ÇÄ, hPŒº‚ÇÄ, habs, rfl‚ü©, h‚ÇÄ‚ü©
  let Œº‚ÇÄP : ProbabilityMeasure G := ‚ü®Œº‚ÇÄ, hPŒº‚ÇÄ‚ü©
  obtain ‚ü®u, -, u_mem, hu‚ü© := exists_seq_strictAnti_tendsto' (x := (0 : ‚Ñù‚â•0‚àû)) zero_lt_one
  let ŒΩ : ‚Ñï ‚Üí Measure G := fun n ‚Ü¶ (1 - u n) ‚Ä¢ Œº‚ÇÄ + u n ‚Ä¢ uniformOn univ
  have : IsProbabilityMeasure (uniformOn (univ : Set G)) :=
    uniformOn_isProbabilityMeasure finite_univ univ_nonempty
  have P n : IsProbabilityMeasure (ŒΩ n) := by
    simp only [isProbabilityMeasure_iff, coe_add, coe_smul, Pi.add_apply, Pi.smul_apply,
      measure_univ, smul_eq_mul, mul_one, ŒΩ]
    rw [ENNReal.sub_add_eq_add_sub, ENNReal.add_sub_cancel_right]
    ¬∑ exact ne_of_lt ((u_mem n).2.trans ENNReal.one_lt_top)
    ¬∑ exact (u_mem n).2.le
    ¬∑ exact ne_of_lt ((u_mem n).2.trans ENNReal.one_lt_top)
  let ŒΩP n : ProbabilityMeasure G := ‚ü®ŒΩ n, P n‚ü©
  have L : Tendsto ŒΩP atTop (ùìù Œº‚ÇÄP) := by
    rw [ProbabilityMeasure.tendsto_iff_forall_apply_tendsto_ennreal]
    intro g
    simp only [ProbabilityMeasure.coe_mk, coe_add, coe_smul, Pi.add_apply, Pi.smul_apply,
      smul_eq_mul, ŒΩP, ŒΩ, Œº‚ÇÄP]
    have : ùìù (Œº‚ÇÄ {g}) = ùìù ((1 - 0) * Œº‚ÇÄ {g} + 0 * (uniformOn univ {g})) := by simp
    rw [this]
    apply Tendsto.add
    ¬∑ apply ENNReal.Tendsto.mul_const _ (by simp)
      exact ENNReal.Tendsto.sub tendsto_const_nhds hu (by simp)
    ¬∑ exact ENNReal.Tendsto.mul_const hu (by simp)
  let PA : ProbabilityMeasure G := ‚ü®uniformOn A, uniformOn_isProbabilityMeasure (A.finite_toSet) hA‚ü©
  have : Tendsto (fun n ‚Ü¶ (ŒΩP n).prod PA) atTop (ùìù (Œº‚ÇÄP.prod PA)) :=
    ProbabilityMeasure.tendsto_prod_of_tendsto_of_tendsto _ _ L _ _ tendsto_const_nhds
  have C : Continuous (Prod.fst + Prod.snd : G √ó G ‚Üí G) := by fun_prop
  have Z := ProbabilityMeasure.tendsto_map_of_tendsto_of_continuous _ _ this
    (f := Prod.fst + Prod.snd) C
  have M : ‚àÄ (x : G), ((Œº‚ÇÄP.prod PA).map C.aemeasurable) {x} = 0 ‚Üí (Measure.map X Œº) {x} = 0 := by
    intro x hx
    apply habs
    simpa [Œº‚ÇÄP, PA] using hx
  have T := tendsto_KLDiv_id_right (X := X) (Œº := Œº) (G := G) Z M
  have : KL[X ; Œº # id ; Measure.map (Prod.fst + Prod.snd) (Œº‚ÇÄ.prod (uniformOn ‚ÜëA))]
      = KL[X ; Œº # Prod.fst + Prod.snd ; (Œº‚ÇÄ.prod (uniformOn ‚ÜëA))] := by
    simp [KLDiv]
  simp only [ProbabilityMeasure.toMeasure_map, ProbabilityMeasure.toMeasure_prod,
    ProbabilityMeasure.coe_mk, this, PA, Œº‚ÇÄP] at T
  rcases ((tendsto_order.1 T).2 _ h‚ÇÄ).exists with ‚ü®n, hn‚ü©
  refine ‚ü®ŒΩ n, P n, fun y ‚Ü¶ ?_, ?_‚ü©
  ¬∑ simp [(u_mem n).1, ŒΩ, uniformOn_apply_singleton_of_mem (mem_univ _) finite_univ]
  ¬∑ have : KL[X ; Œº # id ; Measure.map (Prod.fst + Prod.snd) ((ŒΩ n).prod (uniformOn ‚ÜëA))]
      =  KL[X ; Œº # Prod.fst + Prod.snd ; ((ŒΩ n).prod (uniformOn ‚ÜëA))] := by simp [KLDiv]
    simpa [ŒΩP, this] using hn

private lemma rhoMinus_continuous_aux2 (hA : A.Nonempty) {Œº : ProbabilityMeasure G}
    {r : ‚Ñù} (hr : œÅ‚Åª[id ; Œº # A] < r) [TopologicalSpace G] [DiscreteTopology G] :
    ‚àÄ·∂† (Œº' : ProbabilityMeasure G) in ùìù Œº, œÅ‚Åª[id ; Œº' # A] < r := by
  obtain ‚ü®ŒΩ, ŒΩP, ŒΩ_pos, hŒΩ‚ü© : ‚àÉ (ŒΩ : Measure G), IsProbabilityMeasure ŒΩ ‚àß (‚àÄ y, 0 < ŒΩ {y}) ‚àß
      KL[id ; Œº # Prod.fst + Prod.snd ; ŒΩ.prod (uniformOn A)] < r := by
    apply rhoMinus_continuous_aux1 measurable_id hA hr
  have : Tendsto (fun (Œº' : ProbabilityMeasure G) ‚Ü¶
        KL[id ; Œº' # Prod.fst + Prod.snd ; ŒΩ.prod (uniformOn A)])
      (ùìù Œº) (ùìù (KL[id ; Œº # Prod.fst + Prod.snd ; ŒΩ.prod (uniformOn A)])) :=
    tendsto_KLDiv_id_left tendsto_id
  filter_upwards [(tendsto_order.1 this).2 _ hŒΩ] with Œº' hŒº'
  apply lt_of_le_of_lt _ hŒº'
  apply rhoMinus_le_def measurable_id
  intro y hy
  contrapose hy
  exact map_prod_uniformOn_ne_zero hA (fun x ‚Ü¶ (ŒΩ_pos x).ne')

private lemma rhoMinus_continuous_aux3 (hA : A.Nonempty) {Œº : ProbabilityMeasure G}
    {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) [TopologicalSpace G] [DiscreteTopology G] :
    ‚àÄ·∂† (Œº' : ProbabilityMeasure G) in ùìù Œº, œÅ‚Åª[id ; Œº # A] < œÅ‚Åª[id ; Œº' # A] + Œµ := by
  obtain ‚ü®c, c_pos, hc‚ü© : ‚àÉ c > 0, ‚àÄ g,
      ((Œº : Measure G) {g}).toReal ‚â† 0 ‚Üí c ‚â§ ((Œº : Measure G) {g}).toReal := by
    let B := {g | ((Œº : Measure G) {g}).toReal ‚â† 0}
    have : B.Finite := toFinite B
    have : B.Nonempty := by
      by_contra! H
      simp [B, eq_empty_iff_forall_not_mem] at H
      have : ‚àë g, ((Œº : Measure G) {g}).toReal = 1 := by simp
      simp [H] at this
    have Bn : (B.toFinset.image (fun g ‚Ü¶ ((Œº : Measure G) {g}).toReal)).Nonempty := by
      simpa using this
    let c := (B.toFinset.image (fun g ‚Ü¶ ((Œº : Measure G) {g}).toReal) ).min' Bn
    refine ‚ü®c, ?_, fun g hg ‚Ü¶ ?_‚ü©
    ¬∑ have : c ‚àà B.toFinset.image (fun g ‚Ü¶ ((Œº : Measure G) {g}).toReal) := Finset.min'_mem _ _
      simp only [ne_eq, toFinset_setOf, Finset.mem_image, Finset.mem_filter, Finset.mem_univ,
        true_and, B] at this
      rcases this with ‚ü®g, hg, cg‚ü©
      rw [‚Üê cg]
      exact lt_of_le_of_ne (by simp) (Ne.symm hg)
    ¬∑ apply Finset.min'_le
      simp only [ne_eq, Finset.mem_image, mem_toFinset]
      exact ‚ü®g, hg, rfl‚ü©
  let C := (œÅ‚Åª[id ; Œº # A] + H[id ; (Œº : Measure G)] + 3 * c / 2) / (c / 2)
  have C_nonneg : 0 ‚â§ C := by
    have : 0 ‚â§ œÅ‚Åª[id ; Œº # A] := by
      apply rhoMinus_nonneg measurable_id
    have : 0 ‚â§ H[id ; (Œº : Measure G)] := entropy_nonneg _ _
    positivity
  obtain ‚ü®Œ¥, Œ¥pos, hŒ¥c, hŒ¥‚ü© : ‚àÉ (Œ¥ : ‚Ñù), 0 < Œ¥ ‚àß Œ¥ < c / 2 ‚àß Œ¥ * (2 + C * Fintype.card G) < Œµ := by
    refine ‚ü®(min (c / 2) (Œµ / (2 + C * Fintype.card G))) / 2, ?_, ?_, ?_‚ü©
    ¬∑ positivity
    ¬∑ exact (half_lt_self (by positivity)).trans_le (min_le_left _ _)
    ¬∑ rw [‚Üê lt_div_iff‚ÇÄ (by positivity)]
      exact (half_lt_self (by positivity)).trans_le (min_le_right _ _)
  have E‚ÇÅ : ‚àÄ·∂† (Œº' : ProbabilityMeasure G) in ùìù Œº,
      |H[id ; (Œº' : Measure G)] - H[id ; (Œº : Measure G)]| < Œ¥ := by
    have : Tendsto (fun (Œº' : ProbabilityMeasure G) ‚Ü¶ H[id ; (Œº' : Measure G)])
        (ùìù Œº) (ùìù (H[id ; (Œº : Measure G)])) :=
      continuous_entropy_restrict_probabilityMeasure.continuousAt
    exact (tendsto_order.1 (tendsto_iff_norm_sub_tendsto_zero.1 this)).2 _ Œ¥pos
  have E‚ÇÇ : ‚àÄ·∂† (Œº' : ProbabilityMeasure G) in ùìù Œº, ‚àÄ g,
      |((Œº' : Measure G) {g}).toReal - ((Œº : Measure G) {g}).toReal| < Œ¥ := by
    rw [eventually_all]
    intro g
    have : Tendsto (fun (Œº' : ProbabilityMeasure G) ‚Ü¶ ((Œº' : Measure G) {g}).toReal)
          (ùìù Œº) (ùìù (((Œº : Measure G) {g}).toReal)) := by
      rw [ENNReal.tendsto_toReal_iff (by simp) (by simp)]
      exact (ProbabilityMeasure.tendsto_iff_forall_apply_tendsto_ennreal _ _).1 tendsto_id _
    exact (tendsto_order.1 (tendsto_iff_norm_sub_tendsto_zero.1 this)).2 _ Œ¥pos
  have M : œÅ‚Åª[id ; Œº # A] < œÅ‚Åª[id ; Œº # A] + Œ¥ := by linarith
  filter_upwards [rhoMinus_continuous_aux2 hA M, E‚ÇÅ, E‚ÇÇ] with Œº' h' h‚ÇÅ h‚ÇÇ
  have h‚ÇÉ g (hg : (Œº : Measure G) {g} ‚â† 0) : c/2 ‚â§ ((Œº' : Measure G) {g}).toReal := by
    have : c ‚â§ ((Œº : Measure G) {g}).toReal := by
      apply hc
      simp [ENNReal.toReal_eq_zero_iff, hg]
    linarith [neg_le_of_abs_le (h‚ÇÇ g).le]
  have : œÅ‚Åª[id ; Œº' # A] < œÅ‚Åª[id ; Œº' # A] + Œ¥ := by linarith
  have : ‚àÉ b ‚àà rhoMinusSet id A Œº', b < œÅ‚Åª[id ; Œº' # A] + Œ¥ :=
    (csInf_lt_iff (bddBelow_rhoMinusSet (Œº := Œº') measurable_id (A := A))
    (nonempty_rhoMinusSet hA (X := id) (Œº := Œº'))).1 this
  rcases this with ‚ü®-, ‚ü®ŒΩ, ŒΩP, h'_abs, rfl‚ü©, h‚ü©
  simp only [Measure.map_id] at h'_abs
  set m := Measure.map (Prod.fst + Prod.snd) (ŒΩ.prod (uniformOn A)) with hm
  have m_nonpos g : log (m {g}).toReal ‚â§ 0 := by
    apply log_nonpos (by simp)
    have : m {g} ‚â§ 1 := prob_le_one
    simpa using ENNReal.toReal_mono (by simp) this
  have h_abs : ‚àÄ g, m {g} = 0 ‚Üí (Œº : Measure G) {g} = 0 := by
    intro y hy
    have Z := h'_abs y hy
    simp only [Measure.map_id] at Z ‚ä¢
    contrapose! Z
    intro hy
    have T := h‚ÇÉ _ Z
    simp [hy] at T
    linarith
  have I‚ÇÄ : KL[id ; Œº' # Prod.fst + Prod.snd ; ŒΩ.prod (uniformOn A)]
      = - H[id ; (Œº' : Measure G)] - ‚àë g, ((Œº' : Measure G) {g}).toReal * log ((m {g}).toReal) := by
    rw [KLDiv_eq_sum, entropy_eq_sum, tsum_fintype, ‚Üê Finset.sum_neg_distrib,
      ‚Üê Finset.sum_sub_distrib]
    congr with g
    simp only [Measure.map_id, negMulLog, neg_mul]
    rcases eq_or_ne ((Œº' : Measure G) {g}) 0 with h | h
    ¬∑ simp [h]
    rw [log_div, hm]
    ¬∑ ring
    ¬∑ simp [ENNReal.toReal_eq_zero_iff, h]
    ¬∑ contrapose! h
      apply h'_abs _ (by simpa [ENNReal.toReal_eq_zero_iff] using h)
  have M g (hg : ((Œº : Measure G) {g}).toReal ‚â† 0) : |log ((m {g}).toReal)| ‚â§ C := by
    rw [le_div_iff‚ÇÄ' (by positivity)]
    calc
    (c / 2) * |log ((m {g}).toReal)|
    _ ‚â§ ((Œº' : Measure G) {g}).toReal * |log ((m {g}).toReal)| := by
      gcongr
      apply h‚ÇÉ _ (by simpa [ENNReal.toReal_eq_zero_iff, measure_ne_top, or_false] using hg)
    _ ‚â§ ‚àë g, ((Œº' : Measure G) {g}).toReal * |log ((m {g}).toReal)| := by
      apply Finset.single_le_sum (a := g) (fun i hi ‚Ü¶ by positivity) (Finset.mem_univ g)
    _ = ‚àë g, ((Œº' : Measure G) {g}).toReal * (-log ((m {g}).toReal)) := by
      congr with g
      rw [abs_of_nonpos (m_nonpos g)]
    _ = KL[id ; Œº' # Prod.fst + Prod.snd ; ŒΩ.prod (uniformOn A)] + H[id ; (Œº' : Measure G)] := by
      simp_rw [I‚ÇÄ, mul_neg, Finset.sum_neg_distrib]
      abel
    _ ‚â§ (œÅ‚Åª[id ; Œº' # A] + Œ¥) + H[id ; (Œº' : Measure G)] := by linarith
    _ ‚â§ ((œÅ‚Åª[id ; Œº # A] + Œ¥) + Œ¥) + (H[id ; (Œº : Measure G)] + Œ¥) := by
      gcongr
      linarith [le_of_abs_le h‚ÇÅ.le]
    _ ‚â§ œÅ‚Åª[id ; Œº # A] + H[id ; (Œº : Measure G)] + 3 * c / 2 := by linarith
  calc
  œÅ‚Åª[id ; Œº # A]
  _ ‚â§ KL[id ; Œº # Prod.fst + Prod.snd ; ŒΩ.prod (uniformOn A)] :=
    rhoMinus_le_def measurable_id (by simpa using h_abs)
  _ = - H[id ; (Œº : Measure G)] - ‚àë g, ((Œº : Measure G) {g}).toReal * log ((m {g}).toReal) := by
    rw [KLDiv_eq_sum, entropy_eq_sum, tsum_fintype, ‚Üê Finset.sum_neg_distrib,
      ‚Üê Finset.sum_sub_distrib]
    congr with g
    simp only [Measure.map_id, negMulLog, neg_mul]
    rcases eq_or_ne ((Œº : Measure G) {g}) 0 with h | h
    ¬∑ simp [h]
    rw [log_div, hm]
    ¬∑ ring
    ¬∑ simp [ENNReal.toReal_eq_zero_iff, h]
    ¬∑ contrapose! h
      simp only [ENNReal.toReal_eq_zero_iff, measure_ne_top, or_false] at h
      exact h_abs _ h
  _ ‚â§ - H[id ; (Œº : Measure G)] - ‚àë g ‚àà {g | ((Œº : Measure G) {g}).toReal ‚â† 0},
        ((Œº : Measure G) {g}).toReal * log ((m {g}).toReal) := by
    gcongr
    ¬∑ intro g hg h'g
      simp at h'g
      simp [h'g]
    . exact Finset.filter_subset _ _
   _ ‚â§ - H[id ; (Œº : Measure G)] - ‚àë g ‚àà {g | ((Œº : Measure G) {g}).toReal ‚â† 0},
        (((Œº' : Measure G) {g}).toReal + Œ¥) * log ((m {g}).toReal) := by
    apply sub_le_sub le_rfl
    apply Finset.sum_le_sum (fun g hg ‚Ü¶ ?_)
    apply mul_le_mul_of_nonpos_right _ (m_nonpos g)
    linarith [neg_le_of_abs_le (h‚ÇÇ g).le]
  _  ‚â§ - H[id ; (Œº : Measure G)] - (‚àë g ‚àà {g | ((Œº : Measure G) {g}).toReal ‚â† 0},
          ((Œº' : Measure G) {g}).toReal * log ((m {g}).toReal)
        + ‚àë g ‚àà {g | ((Œº : Measure G) {g}).toReal ‚â† 0}, Œ¥ * (-C)) := by
    rw [‚Üê Finset.sum_add_distrib]
    gcongr with g hg
    rw [add_mul]
    gcongr
    rw [neg_le]
    exact (neg_le_abs _).trans (M g (by simpa using hg))
  _ ‚â§ (-H[id ; (Œº' : Measure G)] + Œ¥) + (- ‚àë g, ((Œº' : Measure G) {g}).toReal * log ((m {g}).toReal)
        + Fintype.card G * (Œ¥ * C)) := by
    simp only [mul_neg, Finset.sum_const, nsmul_eq_mul, sub_eq_add_neg, neg_add, ‚Üê
      Finset.sum_neg_distrib, neg_neg]
    gcongr
    ¬∑ linarith [le_of_abs_le h‚ÇÅ.le]
    ¬∑ intro g hg h'g
      rw [‚Üê neg_mul, neg_mul_comm]
      have T := neg_nonneg.2 (m_nonpos g)
      positivity
    ¬∑ exact Finset.filter_subset _ _
    ¬∑ exact Finset.card_le_univ _
  _ = KL[id ; Œº' # Prod.fst + Prod.snd ; ŒΩ.prod (uniformOn A)] + Œ¥ * (1 + C * Fintype.card G) := by
    rw [I‚ÇÄ]
    ring
  _ ‚â§ (œÅ‚Åª[id ; Œº' # A] + Œ¥) + Œ¥ * (1 + C * Fintype.card G) := by linarith
  _ = œÅ‚Åª[id ; Œº' # A] + Œ¥ * (2 + C * Fintype.card G) := by ring
  _ < œÅ‚Åª[id ; Œº' # A] + Œµ := by linarith

lemma rhoMinus_continuous [TopologicalSpace G] [DiscreteTopology G] (hA : A.Nonempty) :
    Continuous (fun (Œº : ProbabilityMeasure G) ‚Ü¶ œÅ‚Åª[id ; Œº # A]) := by
  apply continuous_iff_continuousAt.2 (fun Œº ‚Ü¶ ?_)
  refine tendsto_order.2 ‚ü®fun r hr ‚Ü¶ ?_, fun r hr ‚Ü¶ rhoMinus_continuous_aux2 hA hr‚ü©
  dsimp at hr
  have : 0 < œÅ‚Åª[id ; Œº # A] - r := by linarith
  filter_upwards [rhoMinus_continuous_aux3 hA this (Œº := Œº)] with Œº' hŒº'
  linarith

/-- For any $G$-valued random variable $X$, we define $\rho^+(X) := \rho^-(X) + \bbH(X) - \bbH(U_A)$. -/
noncomputable def rhoPlus (X : Œ© ‚Üí G) (A : Finset G) (Œº : Measure Œ©) : ‚Ñù :=
  œÅ‚Åª[X ; Œº # A] + H[ X ; Œº ] - log (Nat.card A)

@[inherit_doc rhoPlus] notation3:max "œÅ‚Å∫[" X " ; " Œº " # " A "]" => rhoPlus X A Œº

@[inherit_doc rhoPlus] notation3:max "œÅ‚Å∫[" X " # " A "]" => rhoPlus X A volume

lemma rhoPlus_continuous [TopologicalSpace G] [DiscreteTopology G] (hA : A.Nonempty) :
    Continuous (fun (Œº : ProbabilityMeasure G) ‚Ü¶ œÅ‚Å∫[id ; Œº # A]) := by
  apply Continuous.add
  ¬∑ apply Continuous.add
    ¬∑ apply rhoMinus_continuous hA
    ¬∑ apply continuous_entropy_restrict_probabilityMeasure
  ¬∑ exact continuous_const

lemma rhoPlus_eq_of_identDistrib {Œ©' : Type*} [MeasurableSpace Œ©'] {X' : Œ©' ‚Üí G} {Œº' : Measure Œ©'}
    (h : IdentDistrib X X' Œº Œº') : œÅ‚Å∫[X ; Œº # A] = œÅ‚Å∫[X' ; Œº' # A] := by
  simp [rhoPlus, rhoMinus_eq_of_identDistrib h, h.entropy_eq]

omit [MeasurableSpace G] [DiscreteMeasurableSpace G] in
lemma bddAbove_card_inter_add {A H : Set G} :
    BddAbove {Nat.card (A ‚à© (t +·µ• H) : Set G) | t : G} := by
  refine ‚ü®Nat.card A, fun k hk ‚Ü¶ ?_‚ü©
  simp only [mem_setOf_eq] at hk
  rcases hk with ‚ü®t, rfl‚ü©
  exact Nat.card_mono (toFinite _) inter_subset_left

omit [MeasurableSpace G] [DiscreteMeasurableSpace G] in
lemma exists_mem_card_inter_add (H : AddSubgroup G) {A : Set G} (hA : A.Nonempty) :
    ‚àÉ k > 0, k ‚àà {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G} := by
  rcases hA with ‚ü®t, ht‚ü©
  have : Nonempty (A ‚à© (t +·µ• (H : Set G)) : Set G) := by
    apply Nonempty.to_subtype
    refine ‚ü®t, ht, ?_‚ü©
    exact mem_vadd_set.2 ‚ü®0, zero_mem H, by simp‚ü©
  refine ‚ü®Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G), Nat.card_pos, ?_‚ü©
  simp only [mem_setOf_eq, exists_apply_eq_apply]

omit [MeasurableSpace G] [DiscreteMeasurableSpace G] in
lemma exists_card_inter_add_eq_sSup (H : AddSubgroup G) {A : Set G} (hA : A.Nonempty) :
    ‚àÉ t : G, (Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G)
        = sSup {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G})
      ‚àß 0 < Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) := by
  set k := sSup {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G}
  rcases exists_mem_card_inter_add H hA with ‚ü®n, n_pos, hn‚ü©
  have : k ‚àà {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G} :=
    Nat.sSup_mem ‚ü®n, hn‚ü© bddAbove_card_inter_add
  rcases this with ‚ü®t, ht‚ü©
  have : 0 < Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) := by
    apply lt_of_lt_of_le n_pos
    rw [ht]
    exact le_csSup bddAbove_card_inter_add hn
  exact ‚ü®t, ht, this‚ü©

private lemma le_rhoMinus_of_subgroup [IsProbabilityMeasure Œº] {H : AddSubgroup G}
    {U : Œ© ‚Üí G} (hunif : IsUniform H U Œº) {A : Finset G} (hA : A.Nonempty) (hU : Measurable U) :
    log (Nat.card A) -
      log (sSup {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G} : ‚Ñï) ‚â§ œÅ‚Åª[U ; Œº # A] := by
  apply le_csInf (nonempty_rhoMinusSet hA)
  rintro - ‚ü®Œº', hŒº', habs, rfl‚ü©
  let T : G √ó G ‚Üí G := Prod.fst
  have hT : Measurable T := measurable_fst
  let UA : G √ó G ‚Üí G := Prod.snd
  have hUA : Measurable UA := measurable_snd
  letI : MeasureSpace (G √ó G) := ‚ü®Œº'.prod (uniformOn (A : Set G))‚ü©
  have hprod : (‚Ñô : Measure (G √ó G)) = Œº'.prod (uniformOn (A : Set G)) := rfl
  have : IsProbabilityMeasure (uniformOn (A : Set G)) :=
    uniformOn_isProbabilityMeasure A.finite_toSet hA
  have : IsProbabilityMeasure (Measure.map T ‚Ñô) := by rw [hprod, Measure.map_fst_prod]; simp [hŒº']
  have h_indep : IndepFun T UA := ProbabilityTheory.indepFun_fst_snd
  have hUA_unif : IsUniform A UA := by
    have : IsUniform A id (uniformOn (A : Set G)) := isUniform_uniformOn
    apply IsUniform.of_identDistrib this ?_ A.measurableSet
    exact measurePreserving_snd.identDistrib aemeasurable_id
  have : IsProbabilityMeasure (‚Ñô : Measure (G √ó G)) := by rw [hprod]; infer_instance
  let H' : Finset G := Set.Finite.toFinset (toFinite H)
  have hunif' : IsUniform H' U Œº := by convert hunif; simp [H']
  have I‚ÇÅ : KL[U ; Œº # T + UA ; ‚Ñô] =
      ‚àë h ‚àà H', 1/Nat.card H * log ((1/Nat.card H) / (volume.map (T + UA) {h}).toReal) := by
    rw [KLDiv_eq_sum, ‚Üê Finset.sum_subset (Finset.subset_univ H')]; swap
    ¬∑ intro x _ hH
      rw [Measure.map_apply hU (measurableSet_singleton x), hunif.measure_preimage_of_nmem]
      ¬∑ simp
      ¬∑ simpa [H'] using hH
    apply Finset.sum_congr rfl (fun i hi ‚Ü¶ ?_)
    rw [‚Üê measureReal_def, hunif'.measureReal_preimage_of_mem' hU hi]
    congr <;> simp [H']
  have I‚ÇÇ : (‚àë h ‚àà H', 1/Nat.card H : ‚Ñù) * log ((‚àë h ‚àà H', 1/Nat.card H : ‚Ñù)
      / (‚àë h ‚àà H', (volume.map (T + UA) {h}).toReal)) ‚â§ KL[U ; Œº # T + UA ; ‚Ñô] := by
    rw [I‚ÇÅ]
    apply Real.sum_mul_log_div_leq (by simp) (by simp) (fun i hi h'i ‚Ü¶ ?_)
    simp [ENNReal.toReal_eq_zero_iff] at h'i
    have : (Measure.map U Œº {i}).toReal = 0 := by simp [habs i h'i]
    rw [‚Üê measureReal_def, hunif'.measureReal_preimage_of_mem' hU hi] at this
    simpa [H'] using this
  have : (‚àë h ‚àà H', 1/Nat.card H : ‚Ñù) = 1 := by
    simp only [Finset.sum_const, nsmul_eq_mul, ‚Üê mul_div_assoc, mul_one]
    rw [div_eq_one_iff_eq]
    ¬∑ simp [H', ‚Üê Nat.card_eq_card_finite_toFinset]
    ¬∑ simp [ne_of_gt]
  simp only [this, one_mul] at I‚ÇÇ
  simp only [Finset.sum_toReal_measure_singleton, one_div, log_inv] at I‚ÇÇ
  apply le_trans _ I‚ÇÇ
  have I‚ÇÉ : ((Measure.map (T + UA) ‚Ñô) ‚ÜëH').toReal
      ‚â§ 1 * ((sSup {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G}) / Nat.card A) := by
    have : ‚àë x : G, ((Measure.map T ‚Ñô) {x}).toReal = 1 := by simp
    rw [‚Üê this, add_comm, h_indep.symm.map_add_eq_sum hUA hT,
      ENNReal.toReal_sum (by simp [ENNReal.mul_eq_top]), Finset.sum_mul]
    simp_rw [ENNReal.toReal_mul,
      Measure.map_apply hUA (DiscreteMeasurableSpace.forall_measurableSet _),
      hUA_unif.measure_preimage hUA]
    simp only [measure_univ, singleton_add, image_add_left, neg_neg, one_mul,
      Nat.card_eq_fintype_card, Fintype.card_coe, ENNReal.toReal_div, ENNReal.toReal_nat]
    apply Finset.sum_le_sum (fun i _ ‚Ü¶ ?_)
    gcongr
    apply le_csSup bddAbove_card_inter_add
    rw [inter_comm]
    refine ‚ü®-i, ?_‚ü©
    congr
    ext j
    simp [H', mem_vadd_set_iff_neg_vadd_mem]
  rw [one_mul] at I‚ÇÉ
  have : - log ((sSup {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G}) / Nat.card A) ‚â§
      - log ((Measure.map (T + UA) ‚Ñô) ‚ÜëH').toReal := by
    apply neg_le_neg
    apply log_le_log _ I‚ÇÉ
    apply lt_of_le_of_ne (by simp) (fun h ‚Ü¶ ?_)
    rw [Eq.comm, ENNReal.toReal_eq_zero_iff] at h
    simp only [measure_ne_top, or_false] at h
    have : Measure.map (T + UA) ‚Ñô ({(0 : G)} : Set G) = 0 :=
      measure_mono_null (by simp [H', AddSubgroup.zero_mem]) h
    have Z := habs _ this
    rw [Measure.map_apply hU (measurableSet_singleton 0),
      hunif'.measure_preimage_of_mem hU (by simp [H', AddSubgroup.zero_mem])] at Z
    simp at Z
  convert this using 1
  rw [log_div]
  ¬∑ abel
  ¬∑ norm_cast
    rcases exists_mem_card_inter_add H hA with ‚ü®k, k_pos, hk‚ü©
    exact (lt_of_lt_of_le k_pos (le_csSup bddAbove_card_inter_add hk)).ne'
  ¬∑ norm_cast
    apply ne_of_gt
    have : Nonempty { x // x ‚àà A } := hA.to_subtype
    exact Nat.card_pos

private lemma rhoMinus_le_of_subgroup [IsProbabilityMeasure Œº] {H : AddSubgroup G}
    (t : G) {U : Œ© ‚Üí G} (hunif : IsUniform H U Œº) {A : Finset G} (hA : A.Nonempty)
    (h'A : (A ‚à© (t +·µ• (H : Set G)) : Set G).Nonempty) (hU : Measurable U) :
    œÅ‚Åª[U ; Œº # A] ‚â§
      log (Nat.card A) - log (Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G)) := by
  have mapU : Measure.map U Œº = uniformOn (H : Set G) :=
    hunif.map_eq_uniformOn hU (toFinite H) H.coe_nonempty
  obtain ‚ü®a, ha, h'a‚ü© := by exact h'A
  rcases mem_vadd_set.1 h'a with ‚ü®v, vH, rfl‚ü©
  simp only [vadd_eq_add, Finset.mem_coe] at ha
  have P z : (fun x ‚Ü¶ x - t) ‚Åª¬π' {z} = {z + t} := by ext w; simp [sub_eq_iff_eq_add]
  set Œº' := Œº.map ((¬∑ - t) ‚àò U) with hŒº'
  have Œº'_sing z : Œº' {z} = uniformOn (H : Set G) {z + t} := by
    rw [hŒº', ‚Üê Measure.map_map (by fun_prop) hU,
      Measure.map_apply (by fun_prop) (measurableSet_singleton _), mapU, P]
  have : IsProbabilityMeasure (uniformOn (A : Set G)) :=
    uniformOn_isProbabilityMeasure A.finite_toSet hA
  have : IsProbabilityMeasure Œº' :=
    isProbabilityMeasure_map (Measurable.aemeasurable (by fun_prop))
  have h_indep : IndepFun Prod.fst Prod.snd (Œº'.prod (uniformOn (A : Set G))) := indepFun_fst_snd
  apply csInf_le (bddBelow_rhoMinusSet hU)
  simp only [rhoMinusSet, Nat.card_eq_fintype_card, Fintype.card_coe, mem_setOf_eq]
  refine ‚ü®Œº', this, fun y h ‚Ü¶ ?_, ?_‚ü©
  ¬∑ rw [mapU]
    apply uniformOn_apply_singleton_of_nmem (fun yH ‚Ü¶ ?_)
    rw [h_indep.map_add_singleton_eq_sum measurable_fst measurable_snd,
      Finset.sum_eq_zero_iff_of_nonneg (fun i _ ‚Ü¶ by simp), Measure.map_snd_prod,
      Measure.map_fst_prod] at h
    specialize h (t + v)
    simp only [Finset.mem_univ, measure_univ, one_smul,
      uniformOn_apply_singleton_of_mem (by exact ha) A.finite_toSet, Finset.coe_sort_coe,
      Nat.card_eq_fintype_card, Fintype.card_coe, one_div, Œº'_sing, mul_eq_zero, ENNReal.inv_eq_zero,
      ENNReal.natCast_ne_top, false_or, true_implies] at h
    rw [uniformOn_apply_singleton_of_mem _ (toFinite (H : Set G))] at h
    ¬∑ simp at h
    ¬∑ convert (H.sub_mem yH vH) using 1
      abel
  let H' : Finset G := Set.Finite.toFinset (toFinite H)
  have hunif' : IsUniform H' U Œº := by convert hunif; simp [H']
  rw [KLDiv_eq_sum, ‚Üê Finset.sum_subset (Finset.subset_univ H')]; swap
  ¬∑ intro x _ hH
    rw [Measure.map_apply hU (measurableSet_singleton x), hunif.measure_preimage_of_nmem]
    ¬∑ simp
    ¬∑ simpa [H'] using hH
  have : ‚àë x ‚àà H', ((Measure.map U Œº) {x}).toReal *
      log (((Measure.map U Œº) {x}).toReal
        / ((Measure.map (Prod.fst + Prod.snd) (Œº'.prod (uniformOn ‚ÜëA))) {x}).toReal)
      = ‚àë x ‚àà H', (1/Nat.card H) * log ((1/Nat.card H)
        / (Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) / (Nat.card A * Nat.card H))) := by
    apply Finset.sum_congr rfl (fun x hx ‚Ü¶ ?_)
    have xH : x ‚àà H := by simpa [H'] using hx
    have : (Measure.map U Œº) {x} = 1/Nat.card H := by
      rw [Measure.map_apply hU (measurableSet_singleton _), hunif'.measure_preimage_of_mem hU hx]
      simp [H']
    simp only [this, one_div, ENNReal.toReal_inv, ENNReal.toReal_nat, Nat.cast_eq_zero]
    congr
    rw [h_indep.map_add_singleton_eq_sum measurable_fst measurable_snd, Measure.map_snd_prod,
      Measure.map_fst_prod]
    simp only [measure_univ, one_smul, Œº'_sing]
    let F : Finset G := Set.Finite.toFinset (toFinite (A ‚à© (t +·µ• (H : Set G)) : Set G))
    rw [‚Üê Finset.sum_subset (Finset.subset_univ F)]; swap
    ¬∑ intro i _ hi
      simp only [Finite.mem_toFinset, mem_inter_iff, Finset.mem_coe, not_and, F] at hi
      simp only [mul_eq_zero]
      by_cases h'i : i ‚àà A
      ¬∑ right
        apply uniformOn_apply_singleton_of_nmem (fun h'x ‚Ü¶ ?_)
        apply hi h'i
        exact ‚ü®x - (x-i+t), H.sub_mem xH h'x, by simp; abel‚ü©
      ¬∑ left
        exact uniformOn_apply_singleton_of_nmem h'i
    have : ‚àë i ‚àà F, (uniformOn ‚ÜëA) {i} * (uniformOn ‚ÜëH) {x - i + t} =
        ‚àë i ‚àà F, (1 / Nat.card A * (1 / Nat.card H) : ‚Ñù‚â•0‚àû) := by
      apply Finset.sum_congr rfl (fun i hi ‚Ü¶ ?_)
      simp only [Finite.mem_toFinset, mem_inter_iff, Finset.mem_coe, F] at hi
      rw [uniformOn_apply_singleton_of_mem (by exact hi.1) A.finite_toSet]
      rw [uniformOn_apply_singleton_of_mem _ (toFinite _)]; swap
      ¬∑ convert H.sub_mem xH (mem_vadd_set_iff_neg_vadd_mem.1 hi.2) using 1
        simp
        abel
      rfl
    simp only [this, Nat.card_eq_fintype_card, Fintype.card_coe, one_div, Finset.sum_const,
      nsmul_eq_mul, ENNReal.toReal_mul, ENNReal.toReal_nat, ENNReal.toReal_inv, div_eq_mul_inv,
      ENNReal.one_toReal, one_mul, mul_inv]
    congr
    rw [Nat.card_eq_card_finite_toFinset]
  have C : H'.card = Nat.card H := by rw [‚Üê Nat.card_eq_card_finite_toFinset]; rfl
  simp only [this, one_div, Nat.card_eq_fintype_card, Fintype.card_coe, Finset.sum_const, C,
    nsmul_eq_mul, ‚Üê mul_assoc]
  rw [mul_inv_cancel‚ÇÄ, one_mul]; swap
  ¬∑ norm_cast
    exact Nat.card_pos.ne'
  have C‚ÇÅ : Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) ‚â† 0 := by
    have : Nonempty (A ‚à© (t +·µ• (H : Set G)) : Set G) := h'A.to_subtype
    exact Nat.card_pos.ne'
  have C‚ÇÉ : Nat.card H ‚â† 0 := Nat.card_pos.ne'
  rw [‚Üê log_div (by positivity) (by positivity)]
  congr 1
  field_simp

/-- If $H$ is a finite subgroup of $G$, then
$\rho^-(U_H) = \log |A| - \log \max_t |A \cap (H+t)|$. -/
lemma rhoMinus_of_subgroup [IsProbabilityMeasure Œº] {H : AddSubgroup G}
    {U : Œ© ‚Üí G} (hunif : IsUniform H U Œº) {A : Finset G} (hA : A.Nonempty) (hU : Measurable U) :
    œÅ‚Åª[U ; Œº # A] = log (Nat.card A) -
      log (sSup {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G} : ‚Ñï) := by
  apply le_antisymm _ (le_rhoMinus_of_subgroup hunif hA hU)
  rcases exists_card_inter_add_eq_sSup (A := A) H hA with ‚ü®t, ht, hpos‚ü©
  rw [‚Üê ht]
  have : Nonempty (A ‚à© (t +·µ• (H : Set G)) : Set G) :=  (Nat.card_pos_iff.1 hpos).1
  exact rhoMinus_le_of_subgroup t hunif hA nonempty_of_nonempty_subtype hU

/-- If $H$ is a finite subgroup of $G$, then
$\rho^+(U_H) = \log |H| - \log \max_t |A \cap (H+t)|$. -/
lemma rhoPlus_of_subgroup [IsProbabilityMeasure Œº] {H : AddSubgroup G}
    {U : Œ© ‚Üí G} (hunif : IsUniform H U Œº) {A : Finset G} (hA : A.Nonempty) (hU : Measurable U) :
    œÅ‚Å∫[U ; Œº # A] = log (Nat.card H) -
      log (sSup {Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G) | t : G} : ‚Ñï) := by
  have : H[U ; Œº] = log (Nat.card H) := hunif.entropy_eq' (toFinite _) hU
  rw [rhoPlus, rhoMinus_of_subgroup hunif hA hU, this]
  abel

/-- We define $\rho(X) := (\rho^+(X) + \rho^-(X))/2$. -/
noncomputable def rho (X : Œ© ‚Üí G) (A : Finset G) (Œº : Measure Œ© ) : ‚Ñù :=
  (œÅ‚Åª[X ; Œº # A] + œÅ‚Å∫[X ; Œº # A]) / 2

@[inherit_doc rho] notation3:max "œÅ[" X " ; " Œº " # " A "]" => rho X A Œº

@[inherit_doc rho] notation3:max "œÅ[" X " # " A "]" => rho X A volume


lemma rho_eq_of_identDistrib {Œ©' : Type*} [MeasurableSpace Œ©'] {X' : Œ©' ‚Üí G} {Œº' : Measure Œ©'}
    (h : IdentDistrib X X' Œº Œº') : œÅ[X ; Œº # A] = œÅ[X' ; Œº' # A] := by
  simp [rho, rhoMinus_eq_of_identDistrib h, rhoPlus_eq_of_identDistrib h]

/-- We have $\rho(U_A) = 0$. -/
lemma rho_of_uniform [IsProbabilityMeasure Œº]
    {U : Œ© ‚Üí G} {A : Finset G} (hunif : IsUniform A U Œº) (hU : Measurable U)
    (hA : A.Nonempty) : œÅ[U ; Œº # A] = 0 := by
  have : H[U ; Œº] = log (Nat.card A) := hunif.entropy_eq' (toFinite _) hU
  simp only [rho, rhoPlus, this, Nat.card_eq_fintype_card, Fintype.card_coe, add_sub_cancel_right,
    add_self_div_two]
  apply le_antisymm _ (rhoMinus_nonneg hU)
  have Z := rhoMinus_le hU hA (T := fun _ ‚Ü¶ 0) hunif measurable_const hU
    (indepFun_const 0).symm (Œº := Œº)
  have : (fun x ‚Ü¶ 0) + U = U := by ext y; simp
  simpa [this] using Z

/-- If $H$ is a finite subgroup of $G$, and $\rho(U_H) \leq r$, then there exists $t$ such
that $|A \cap (H+t)| \geq e^{-r} \sqrt{|A||H|}$, and $|H|/|A| \in [e^{-2r}, e^{2r}]$. -/
lemma rho_of_subgroup [IsProbabilityMeasure Œº] {H : AddSubgroup G} {U : Œ© ‚Üí G}
    (hunif : IsUniform H U Œº) {A : Finset G} (hA : A.Nonempty) (hU : Measurable U)
    (r : ‚Ñù) (hr : œÅ[U ; Œº # A] ‚â§ r) :
    ‚àÉ t : G,
      exp (-r) * (Nat.card A * Nat.card H) ^ (1/2) ‚â§ Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G)
      ‚àß Nat.card A ‚â§ exp (2 * r) * Nat.card H
      ‚àß Nat.card H ‚â§ exp (2 * r) * Nat.card A := by
  have hr' : œÅ[U ; Œº # A] ‚â§ r := hr
  have Hpos : 0 < (Nat.card H : ‚Ñù) := by exact_mod_cast Nat.card_pos
  have : Nonempty A := hA.to_subtype
  have Apos : 0 < (Nat.card A : ‚Ñù) := by exact_mod_cast Nat.card_pos
  simp only [rho] at hr
  rw [rhoMinus_of_subgroup hunif hA hU, rhoPlus_of_subgroup hunif hA hU] at hr
  rcases exists_card_inter_add_eq_sSup (A := A) H hA with ‚ü®t, ht, hpos‚ü©
  rw [‚Üê ht] at hr
  have Rm : 0 ‚â§ œÅ‚Åª[U ; Œº # A] := rhoMinus_nonneg hU
  have RM : 0 ‚â§ œÅ‚Å∫[U ; Œº # A] := by
    rw [rhoPlus_of_subgroup hunif hA hU, ‚Üê ht, sub_nonneg]
    apply log_le_log (mod_cast hpos)
    norm_cast
    have : Nat.card (t +·µ• (H : Set G) : Set G) = Nat.card H := by
      apply Nat.card_image_of_injective (add_right_injective t)
    rw [‚Üê this]
    exact Nat.card_mono (toFinite _) inter_subset_right
  have I : |log (Nat.card H) - log (Nat.card A)| ‚â§ 2 * r := calc
    |log (Nat.card H) - log (Nat.card A)|
    _ = |H[U ; Œº] - log (Nat.card A)| := by rw [hunif.entropy_eq' (toFinite _) hU]; rfl
    _ = |œÅ‚Å∫[U ; Œº # A] - œÅ‚Åª[U ; Œº # A]| := by congr 1; simp [rhoPlus]; abel
    _ ‚â§ œÅ‚Å∫[U ; Œº # A] + œÅ‚Åª[U ; Œº # A] :=
      (abs_sub _ _).trans_eq (by simp [abs_of_nonneg, Rm, RM])
    _ = 2 * œÅ[U ; Œº # A] := by simp [rho]; ring
    _ ‚â§ 2 * r := by linarith
  refine ‚ü®t, ?_, ?_, ?_‚ü©
  ¬∑ have : - r + (log (Nat.card A) + log (Nat.card H)) * (1/2) ‚â§
      log (Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G)) := by linarith
    have := exp_monotone this
    rwa [exp_add, exp_log (by exact_mod_cast hpos), exp_mul, exp_add,
      exp_log Hpos, exp_log Apos] at this
  ¬∑ have : log (Nat.card A) ‚â§ 2 * r + log (Nat.card H) := by
      linarith [(abs_sub_le_iff.1 I).2]
    have := exp_monotone this
    rwa [exp_log Apos, exp_add, exp_log Hpos] at this
  ¬∑ have : log (Nat.card H) ‚â§ 2 * r + log (Nat.card A) := by
      linarith [(abs_sub_le_iff.1 I).1]
    have := exp_monotone this
    rwa [exp_log Hpos, exp_add, exp_log Apos] at this

/-- If $H$ is a finite subgroup of $G$, and $\rho(U_H) \leq r$, then there exists $t$ such
that $|A \cap (H+t)| \geq e^{-r} \sqrt{|A||H|}$, and $|H|/|A| \in [e^{-2r}, e^{2r}]$. -/
lemma rho_of_submodule [IsProbabilityMeasure Œº] [Module (ZMod 2) G]
    {H : Submodule (ZMod 2) G} {U : Œ© ‚Üí G}
    (hunif : IsUniform H U Œº) {A : Finset G} (hA : A.Nonempty) (hU : Measurable U)
    (r : ‚Ñù) (hr : œÅ[U ; Œº # A] ‚â§ r) :
    ‚àÉ t : G,
      exp (-r) * (Nat.card A * Nat.card H) ^ (1/2) ‚â§ Nat.card (A ‚à© (t +·µ• (H : Set G)) : Set G)
      ‚àß Nat.card A ‚â§ exp (2 * r) * Nat.card H
      ‚àß Nat.card H ‚â§ exp (2 * r) * Nat.card A :=
  rho_of_subgroup (H := H.toAddSubgroup) hunif hA hU r hr

/-- \rho(X)$ depends continuously on the distribution of $X$. -/
lemma rho_continuous [TopologicalSpace G] [DiscreteTopology G] [BorelSpace G]
    {A : Finset G} (hA : A.Nonempty) :
    Continuous fun Œº : ProbabilityMeasure G ‚Ü¶ œÅ[(id : G ‚Üí G) ; Œº # A] :=
  ((rhoMinus_continuous hA).add (rhoPlus_continuous hA)).div_const _

lemma tendsto_rho_probabilityMeasure {Œ± : Type*} {l : Filter Œ±}
    [TopologicalSpace Œ©] [BorelSpace Œ©] [TopologicalSpace G] [BorelSpace G]
    [DiscreteTopology G] {X : Œ© ‚Üí G} (hX : Continuous X) (hA : A.Nonempty)
    {Œº : Œ± ‚Üí ProbabilityMeasure Œ©} {ŒΩ : ProbabilityMeasure Œ©} (hŒº : Tendsto Œº l (ùìù ŒΩ)) :
    Tendsto (fun n ‚Ü¶ œÅ[X ; (Œº n : Measure Œ©) # A]) l (ùìù (œÅ[X ; ŒΩ # A])) := by
  have J (Œ∑ : ProbabilityMeasure Œ©) :
      œÅ[X ; Œ∑ # A] = œÅ[(id : G ‚Üí G) ; Œ∑.map hX.aemeasurable # A] := by
    apply rho_eq_of_identDistrib
    exact ‚ü®hX.aemeasurable, aemeasurable_id, by simp‚ü©
  simp_rw [J]
  have Z := ((rho_continuous hA).tendsto ((ŒΩ.map hX.aemeasurable)))
  have T : Tendsto (fun n ‚Ü¶ (Œº n).map hX.aemeasurable) l (ùìù (ŒΩ.map hX.aemeasurable)) :=
    ProbabilityMeasure.tendsto_map_of_tendsto_of_continuous Œº ŒΩ hŒº hX
  apply Z.comp T

/-- If $X,Y$ are independent, one has
  $$ \rho^-(X+Y) \leq \rho^-(X)$$ -/
lemma rhoMinus_of_sum [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) (hY : Measurable Y)
    (hA : A.Nonempty) (h_indep : IndepFun X Y Œº) :
    œÅ‚Åª[X + Y ; Œº # A] ‚â§ œÅ‚Åª[X ; Œº # A] := by
  rcases eq_zero_or_isProbabilityMeasure Œº with hŒº | hŒº
  ¬∑ simp [rhoMinus_zero_measure hŒº]
  apply le_csInf (nonempty_rhoMinusSet hA)
  have : IsProbabilityMeasure (uniformOn (A : Set G)) :=
    uniformOn_isProbabilityMeasure A.finite_toSet hA
  rintro - ‚ü®Œº', Œº'_prob, habs, rfl‚ü©
  obtain ‚ü®Œ©', hŒ©', m, X', Y', T, U, hm, h_indep', hX', hY', hT, hU, hXX', hYY', hTŒº, hU_unif‚ü© :=
    independent_copies4_nondep (X‚ÇÅ := X) (X‚ÇÇ := Y) (X‚ÇÉ := id) (X‚ÇÑ := id) hX hY measurable_id
    measurable_id Œº Œº Œº' (uniformOn (A : Set G))
  let _ : MeasureSpace Œ©' := ‚ü®m‚ü©
  have hP : (‚Ñô : Measure Œ©') = m := rfl
  have hTU : IdentDistrib (T + U) (Prod.fst + Prod.snd) ‚Ñô (Œº'.prod (uniformOn (A : Set G))) := by
    apply IdentDistrib.add
    ¬∑ exact hTŒº.trans IdentDistrib.fst_id.symm
    ¬∑ exact hU_unif.trans IdentDistrib.snd_id.symm
    ¬∑ exact h_indep'.indepFun (i := 2) (j := 3) (by simp)
    ¬∑ exact indepFun_fst_snd
  have hXY : IdentDistrib (X + Y) (X' + Y') Œº ‚Ñô := by
    apply IdentDistrib.add hXX'.symm hYY'.symm h_indep
    exact h_indep'.indepFun zero_ne_one
  have hX'TUY' : IndepFun (‚ü®X', T + U‚ü©) Y' ‚Ñô := by
    have I : iIndepFun (fun x ‚Ü¶ hGm) ![X', Y', T + U] m :=
      ProbabilityTheory.iIndepFun.apply_two_last h_indep' hX' hY' hT hU
        (phi := fun a b ‚Ü¶ a + b) (by fun_prop)
    exact (I.reindex_three_bac.pair_last_of_three hY' hX' (by fun_prop)).symm
  have I‚ÇÅ : œÅ‚Åª[X + Y ; Œº # A] ‚â§ KL[X + Y ; Œº # (T + Y') + U ; ‚Ñô] := by
    apply rhoMinus_le (by fun_prop) hA _ (by fun_prop) (by fun_prop)
    ¬∑ have : iIndepFun (fun x ‚Ü¶ hGm) ![U, X', T, Y'] := h_indep'.reindex_four_dacb
      have : iIndepFun (fun x ‚Ü¶ hGm) ![U, X', T + Y'] :=
        this.apply_two_last (phi := fun a b ‚Ü¶ a + b) hU hX' hT hY' (by fun_prop)
      apply this.indepFun (i := 2) (j := 0)
      simp
    ¬∑ rw [hXY.map_eq]
      have : T + Y' + U = (T + U) + Y' := by abel
      rw [this]
      apply absolutelyContinuous_add_of_indep hX'TUY' hX' (by fun_prop) hY'
      rw [hTU.map_eq, hP, hXX'.map_eq]
      exact habs
    ¬∑ exact isUniform_uniformOn.of_identDistrib hU_unif.symm A.measurableSet
  have I‚ÇÇ : KL[X + Y ; Œº # (T + Y') + U ; ‚Ñô] = KL[X' + Y' # (T + U) + Y'] := by
    apply IdentDistrib.KLDiv_eq _ _ hXY
    have : T + Y' + U = T + U + Y' := by abel
    rw [this]
    apply IdentDistrib.refl
    fun_prop
  have I‚ÇÉ : KL[X' + Y' # (T + U) + Y'] ‚â§ KL[X' # T + U] := by
    apply KLDiv_add_le_KLDiv_of_indep _ (by fun_prop) (by fun_prop) (by fun_prop)
    ¬∑ rw [hTU.map_eq, hP, hXX'.map_eq]
      exact habs
    ¬∑ exact hX'TUY'
  have I‚ÇÑ : KL[X' # T + U] = KL[X ; Œº # Prod.fst + Prod.snd ; Œº'.prod (uniformOn (A : Set G))] :=
    IdentDistrib.KLDiv_eq _ _ hXX' hTU
  exact ((I‚ÇÅ.trans_eq I‚ÇÇ).trans I‚ÇÉ).trans_eq I‚ÇÑ

/-- If $X,Y$ are independent, one has
$$ \rho^+(X+Y) \leq \rho^+(X) + \bbH[X+Y] - \bbH[X]$$ -/
lemma rhoPlus_of_sum [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) (hY : Measurable Y) (hA : A.Nonempty) (h_indep : IndepFun X Y Œº) :
    œÅ‚Å∫[X + Y ; Œº # A] ‚â§ œÅ‚Å∫[X ; Œº # A] + H[X + Y ; Œº] - H[X ; Œº] := by
  simp [rhoPlus]
  have := rhoMinus_of_sum hX hY hA h_indep
  linarith

/-- If $X,Y$ are independent, one has
  $$ \rho(X+Y) \leq \rho(X) + \frac{1}{2}( \bbH[X+Y] - \bbH[X] ).$$
  -/
lemma rho_of_sum [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) (hY : Measurable Y) (hA : A.Nonempty) (h_indep : IndepFun X Y Œº) :
    œÅ[X + Y ; Œº # A] ‚â§ œÅ[X ; Œº # A] + (H[X+Y ; Œº] - H[X ; Œº])/2 := by
  simp [rho, rhoPlus]
  have := rhoMinus_of_sum hX hY hA h_indep
  linarith

private lemma rho_le_translate [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) (hA : A.Nonempty) (s : G) :
    œÅ[(fun œâ ‚Ü¶ X œâ + s) ; Œº # A] ‚â§ œÅ[X ; Œº # A] := by
  have : œÅ[(fun œâ ‚Ü¶ X œâ + s) ; Œº # A] ‚â§ œÅ[X ; Œº # A] + (H[fun œâ ‚Ü¶ X œâ + s ; Œº] - H[X ; Œº]) / 2 :=
    rho_of_sum (Y := fun œâ ‚Ü¶ s) hX measurable_const hA (indepFun_const s)
  have : H[fun œâ ‚Ü¶ X œâ + s ; Œº] = H[X ; Œº] := entropy_add_const hX _
  linarith

lemma rho_of_translate [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) (hA : A.Nonempty) (s : G) :
    œÅ[(fun œâ ‚Ü¶ X œâ + s) ; Œº # A] = œÅ[X ; Œº # A] := by
  apply le_antisymm (rho_le_translate hX hA s)
  convert rho_le_translate (X := fun œâ ‚Ü¶ X œâ + s) (by fun_prop) hA (-s) (Œº := Œº) with œâ
  abel

-- This may not be the optimal spelling for condRho, feel free to improve
/-- We define $\rho(X|Y) := \sum_y {\bf P}(Y=y) \rho(X|Y=y)$. -/
noncomputable def condRho {S : Type*}
    (X : Œ© ‚Üí G) (Y : Œ© ‚Üí S) (A : Finset G) (Œº : Measure Œ©): ‚Ñù :=
  ‚àë' s, (Œº (Y ‚Åª¬π' {s})).toReal * œÅ[X ; Œº[|Y ‚Üê s] # A]

/-- Average of rhoMinus along the fibers-/
noncomputable def condRhoMinus {S : Type*}
    (X : Œ© ‚Üí G) (Y : Œ© ‚Üí S) (A : Finset G) (Œº : Measure Œ©) : ‚Ñù :=
  ‚àë' s, (Œº (Y ‚Åª¬π' {s})).toReal * œÅ‚Åª[X ; Œº[|Y ‚Üê s] # A]

/-- Average of rhoPlus along the fibers-/
noncomputable def condRhoPlus {S : Type*}
    (X : Œ© ‚Üí G) (Y : Œ© ‚Üí S) (A : Finset G) (Œº : Measure Œ©) : ‚Ñù :=
  ‚àë' s, (Œº (Y ‚Åª¬π' {s})).toReal * œÅ‚Å∫[X ; Œº[|Y ‚Üê s] # A]

@[inherit_doc condRho]
notation3:max "œÅ[" X " | " Z " ; " Œº " # " A "]" => condRho X Z A Œº

@[inherit_doc condRho]
notation3:max "œÅ[" X " | " Z " # " A "]" => condRho X Z A volume

@[inherit_doc condRhoMinus]
notation3:max "œÅ‚Åª[" X " | " Z " ; " Œº " # " A "]" => condRhoMinus X Z A Œº

@[inherit_doc condRhoPlus]
notation3:max "œÅ‚Å∫[" X " | " Z " ; " Œº " # " A "]" => condRhoPlus X Z A Œº

/-- For any $s\in G$, $\rho(X+s|Y)=\rho(X|Y)$. -/
lemma condRho_of_translate {S : Type*}
    {Y : Œ© ‚Üí S} (hX : Measurable X) (hA : A.Nonempty) (s : G) :
    œÅ[fun œâ ‚Ü¶ X œâ + s | Y ; Œº # A] = œÅ[X | Y ; Œº # A] := by
  simp [condRho, rho_of_translate hX hA]

omit [Fintype G] [DiscreteMeasurableSpace G] in
variable (X) in
/-- If $f$ is injective, then $\rho(X|f(Y))=\rho(X|Y)$. -/
lemma condRho_of_injective {S T : Type*}
    (Y : Œ© ‚Üí S) {A : Finset G} {f : S ‚Üí T} (hf : Function.Injective f) :
    œÅ[X | f ‚àò Y ; Œº # A] = œÅ[X | Y ; Œº # A] := by
  simp only [condRho]
  rw [‚Üê hf.tsum_eq]
  ¬∑ have I c : f ‚àò Y ‚Åª¬π' {f c} = Y ‚Åª¬π' {c} := by
      ext z; simp [hf.eq_iff]
    simp [I]
  ¬∑ intro y hy
    have : f ‚àò Y ‚Åª¬π' {y} ‚â† ‚àÖ := by
      intro h
      simp [h] at hy
    rcases Set.nonempty_iff_ne_empty.2 this with ‚ü®a, ha‚ü©
    simp only [mem_preimage, Function.comp_apply, mem_singleton_iff] at ha
    rw [‚Üê ha]
    exact mem_range_self (Y a)

lemma condRho_eq_of_identDistrib {S : Type*} [MeasurableSpace S] [MeasurableSingletonClass S]
    {Y : Œ© ‚Üí G} {W : Œ© ‚Üí S} {Œ©' : Type*} [MeasurableSpace Œ©'] {Œº' : Measure Œ©'}
    {Y' : Œ©' ‚Üí G} {W' : Œ©' ‚Üí S} (hY : Measurable Y) (hW : Measurable W) (hY' : Measurable Y')
    (hW' : Measurable W')
    (h : IdentDistrib (‚ü®Y, W‚ü©) (‚ü®Y', W'‚ü©) Œº Œº') :
    œÅ[Y | W ; Œº # A] = œÅ[Y' | W' ; Œº' # A] := by
  rw [condRho]
  congr with g
  have M : Œº (W ‚Åª¬π' {g}) = Œº' (W' ‚Åª¬π' {g}) := by
    have I : IdentDistrib W W' Œº Œº' := h.comp (u := Prod.snd) measurable_snd
    rw [‚Üê map_apply hW (.singleton _), ‚Üê map_apply hW' (.singleton _), I.map_eq]
  rw [M]
  congr 1
  apply rho_eq_of_identDistrib
  refine ‚ü®hY.aemeasurable, hY'.aemeasurable, ?_‚ü©
  ext s hs
  rw [map_apply hY hs, map_apply hY' hs, cond_apply (hW (.singleton _)),
    cond_apply (hW' (.singleton _)), M]
  congr
  have E : W ‚Åª¬π' {g} ‚à© Y ‚Åª¬π' s = (‚ü®Y, W‚ü©) ‚Åª¬π' (s √óÀ¢ {g}) := by ext; aesop
  have F : W' ‚Åª¬π' {g} ‚à© Y' ‚Åª¬π' s = (‚ü®Y', W'‚ü©) ‚Åª¬π' (s √óÀ¢ {g}) := by ext; aesop
  rw [E, F, ‚Üê map_apply (by fun_prop) (hs.prod (.singleton _)),
    ‚Üê map_apply (by fun_prop) (hs.prod (.singleton _)), h.map_eq]

/-- $$ \rho^-(X|Z) \leq \rho^-(X) + \bbH[X] - \bbH[X|Z]$$ -/
lemma condRhoMinus_le [IsZeroOrProbabilityMeasure Œº] {S : Type*} [MeasurableSpace S]
    [Fintype S] [MeasurableSingletonClass S]
    {Z : Œ© ‚Üí S} (hX : Measurable X) (hZ : Measurable Z) (hA : A.Nonempty) :
    œÅ‚Åª[X | Z ; Œº # A] ‚â§ œÅ‚Åª[X ; Œº # A] + H[X ; Œº] - H[X | Z ; Œº] := by
  have : IsProbabilityMeasure (uniformOn (A : Set G)) := by
    apply uniformOn_isProbabilityMeasure A.finite_toSet hA
  suffices œÅ‚Åª[X | Z ; Œº # A] - H[X ; Œº] + H[X | Z ; Œº] ‚â§ œÅ‚Åª[X ; Œº # A] by linarith
  apply le_csInf (nonempty_rhoMinusSet hA)
  rintro - ‚ü®Œº', hŒº', habs, rfl‚ü©
  rw [condRhoMinus, tsum_fintype]
  let _ : MeasureSpace (G √ó G) := ‚ü®Œº'.prod (uniformOn (A : Set G))‚ü©
  have hP : (‚Ñô : Measure (G √ó G)) = Œº'.prod (uniformOn (A : Set G)) := rfl
  have : IsProbabilityMeasure (‚Ñô : Measure (G √ó G)) := by rw [hP]; infer_instance
  have : ‚àë b : S, (Œº (Z ‚Åª¬π' {b})).toReal * œÅ‚Åª[X ; Œº[|Z ‚Üê b] # A]
      ‚â§ KL[ X | Z ; Œº # (Prod.fst + Prod.snd : G √ó G ‚Üí G) ; ‚Ñô] := by
    rw [condKLDiv, tsum_fintype]
    apply Finset.sum_le_sum (fun i hi ‚Ü¶ ?_)
    gcongr
    apply rhoMinus_le_def hX (fun y hy ‚Ü¶ ?_)
    have T := habs y hy
    rw [Measure.map_apply hX (measurableSet_singleton _)] at T ‚ä¢
    exact cond_absolutelyContinuous T
  rw [condKLDiv_eq hX hZ (by exact habs)] at this
  rw [‚Üê hP]
  linarith

/-- $$ \rho^+(X|Z) \leq \rho^+(X)$$ -/
lemma condRhoPlus_le [IsProbabilityMeasure Œº] {S : Type*} [MeasurableSpace S]
    [Fintype S] [MeasurableSingletonClass S]
    {Z : Œ© ‚Üí S} (hX : Measurable X) (hZ : Measurable Z) (hA : A.Nonempty) :
    œÅ‚Å∫[X | Z ; Œº # A] ‚â§ œÅ‚Å∫[X ; Œº # A] := by
  have : IsProbabilityMeasure (Measure.map Z Œº) := isProbabilityMeasure_map hZ.aemeasurable
  have I‚ÇÅ := condRhoMinus_le hX hZ hA (Œº := Œº)
  simp_rw [condRhoPlus, rhoPlus, tsum_fintype]
  simp only [Nat.card_eq_fintype_card, Fintype.card_coe, mul_sub, mul_add, Finset.sum_sub_distrib,
    Finset.sum_add_distrib, tsub_le_iff_right]
  rw [‚Üê Finset.sum_mul, ‚Üê tsum_fintype, ‚Üê condRhoMinus, ‚Üê condEntropy_eq_sum_fintype _ _ _ hZ]
  simp_rw [‚Üê Measure.map_apply hZ (measurableSet_singleton _)]
  simp only [Finset.sum_toReal_measure_singleton, Finset.coe_univ, measure_univ, ENNReal.one_toReal,
    one_mul, sub_add_cancel, ge_iff_le]
  linarith

omit [Fintype G] [DiscreteMeasurableSpace G] in
lemma condRho_eq {S : Type*} [Fintype S] {Z : Œ© ‚Üí S} :
    œÅ[X | Z ; Œº # A] = (œÅ‚Åª[X | Z ; Œº # A] + œÅ‚Å∫[X | Z ; Œº # A]) / 2 := by
  simp_rw [condRho, rho, ‚Üê mul_div_assoc, tsum_fintype, ‚Üê Finset.sum_div, mul_add,
    Finset.sum_add_distrib, ‚Üê tsum_fintype]
  rfl

/-- $$ \rho(X|Z) \leq \rho(X) + \frac{1}{2}( \bbH[X] - \bbH[X|Z] )$$ -/
lemma condRho_le [IsProbabilityMeasure Œº] {S : Type*} [MeasurableSpace S]
    [Fintype S] [MeasurableSingletonClass S]
    {Z : Œ© ‚Üí S} (hX : Measurable X) (hZ : Measurable Z) (hA : A.Nonempty) :
    œÅ[X | Z ; Œº # A] ‚â§ œÅ[X ; Œº # A] + (H[X ; Œº] - H[X | Z ; Œº]) / 2 := by
  rw [condRho_eq, rho]
  linarith [condRhoMinus_le hX hZ hA (Œº := Œº), condRhoPlus_le hX hZ hA (Œº := Œº)]

omit [Fintype G] [DiscreteMeasurableSpace G] in
lemma condRho_prod_eq_sum [IsProbabilityMeasure Œº] {S : Type*} [MeasurableSpace S]
    [Fintype S] [MeasurableSingletonClass S]
    {Z T : Œ© ‚Üí S} (hZ : Measurable Z) (hT : Measurable T) :
    œÅ[X | ‚ü®Z, T‚ü© ; Œº # A] = ‚àë g, (Œº (T ‚Åª¬π' {g})).toReal * œÅ[X | Z ; Œº[|T ‚Üê g] # A] := by
  rw [condRho, tsum_fintype, ‚Üê Finset.univ_product_univ, Finset.sum_product_right]
  congr 1 with w
  simp only [condRho, tsum_fintype, Finset.mul_sum]
  congr 1 with w'
  rw [‚Üê mul_assoc]
  have A : (fun a ‚Ü¶ (Z a, T a)) ‚Åª¬π' {(w', w)} = Z ‚Åª¬π' {w'} ‚à© T ‚Åª¬π' {w} := by ext; simp
  congr 1
  ¬∑ simp only [A, ProbabilityTheory.cond, Measure.smul_apply,
      Measure.restrict_apply (hZ (.singleton w')),
      smul_eq_mul, ENNReal.toReal_mul]
    rcases eq_bot_or_bot_lt (Œº (T ‚Åª¬π' {w})) with hw|hw
    ¬∑ have : Œº (Z ‚Åª¬π' {w'} ‚à© T ‚Åª¬π' {w}) = 0 :=
        le_antisymm (le_trans (measure_mono Set.inter_subset_right) hw.le) bot_le
      simp [hw, this]
    ¬∑ rw [‚Üê mul_assoc, ‚Üê ENNReal.toReal_mul, ENNReal.mul_inv_cancel, ENNReal.one_toReal, one_mul]
      exacts [hw.ne', by finiteness]
  ¬∑ congr 1
    rw [A, cond_cond_eq_cond_inter' (hT (.singleton _)) (hZ (.singleton _)), Set.inter_comm]
    finiteness

/-- $$ \rho(X|Z) \leq \rho(X) + \frac{1}{2}( \bbH[X] - \bbH[X|Z] )$$, conditional version -/
lemma condRho_prod_le [IsProbabilityMeasure Œº] {S : Type*} [MeasurableSpace S]
    [Fintype S] [MeasurableSingletonClass S]
    {Z T : Œ© ‚Üí S} (hX : Measurable X) (hZ : Measurable Z) (hT : Measurable T) (hA : A.Nonempty) :
    œÅ[X | ‚ü®Z, T‚ü© ; Œº # A] ‚â§ œÅ[X | T ; Œº # A] + (H[X | T ; Œº] - H[X | ‚ü®Z, T‚ü© ; Œº]) / 2 := by
  rw [condRho_prod_eq_sum hZ hT]
  have : ‚àë g : S, (Œº (T ‚Åª¬π' {g})).toReal * œÅ[ X | Z ; Œº[|T ‚Åª¬π' {g}] # A] ‚â§
    ‚àë g : S, (Œº (T ‚Åª¬π' {g})).toReal *
      (œÅ[X ; Œº[|T ‚Åª¬π' {g}] # A] + (H[X ; Œº[|T ‚Åª¬π' {g}]] - H[X | Z ; Œº[|T ‚Åª¬π' {g}]]) / 2) := by
    apply Finset.sum_le_sum (fun g hg ‚Ü¶ ?_)
    rcases eq_or_ne (Œº (T ‚Åª¬π' {g})) 0 with hpg | hpg
    ¬∑ simp [hpg]
    gcongr
    have hŒº : IsProbabilityMeasure (Œº[|T ‚Åª¬π' {g}]) := cond_isProbabilityMeasure hpg
    exact condRho_le hX hZ hA
  apply this.trans_eq
  simp_rw [mul_add, mul_div, mul_sub, Finset.sum_add_distrib, ‚Üê Finset.sum_div,
    Finset.sum_sub_distrib, condRho, tsum_fintype, condEntropy_eq_sum_fintype X T Œº hT,
    condEntropy_prod_eq_sum Œº hZ hT]

lemma condRho_prod_eq_of_indepFun [IsProbabilityMeasure Œº]
    {X : Œ© ‚Üí G} {S : Type*} [Fintype S] [MeasurableSpace S] [MeasurableSingletonClass S]
    {W W' : Œ© ‚Üí S} (hX : Measurable X) (hW : Measurable W)
    (hW' : Measurable W') (h : IndepFun (‚ü®X, W‚ü©) W' Œº) :
    œÅ[X | ‚ü®W, W'‚ü© ; Œº # A] = œÅ[X | W ; Œº # A] := by
  rw [condRho_prod_eq_sum hW hW']
  have : œÅ[X | W ; Œº # A] = ‚àë z, (Œº (W' ‚Åª¬π' {z})).toReal * œÅ[X | W ; Œº # A] := by
    rw [‚Üê Finset.sum_mul, sum_measure_preimage_singleton' Œº hW', one_mul]
  rw [this]
  congr with w
  rcases eq_or_ne (Œº (W' ‚Åª¬π' {w})) 0 with hw|hw
  ¬∑ simp [hw]
  congr 1
  apply condRho_eq_of_identDistrib hX hW hX hW
  exact (h.identDistrib_cond (MeasurableSet.singleton w) (by fun_prop) hW' hw).symm

variable [Module (ZMod 2) G]

/-- If $X,Y$ are independent, then
  $$ \rho(X+Y) \leq \frac{1}{2}(\rho(X)+\rho(Y) + d[X;Y]).$$
 -/
lemma rho_of_sum_le [IsZeroOrProbabilityMeasure Œº]
    (hX : Measurable X) (hY : Measurable Y) (hA : A.Nonempty) (h_indep : IndepFun X Y Œº) :
    œÅ[X + Y ; Œº # A] ‚â§ (œÅ[X ; Œº # A] + œÅ[Y ; Œº # A] + d[ X ; Œº # Y ; Œº]) / 2 := by
  have I : œÅ[X + Y ; Œº # A] ‚â§ œÅ[X ; Œº # A] + (H[X+Y ; Œº] - H[X ; Œº])/2 := rho_of_sum hX hY hA h_indep
  have J : œÅ[Y + X ; Œº # A] ‚â§ œÅ[Y ; Œº # A] + (H[Y+X ; Œº] - H[Y ; Œº ])/2 :=
    rho_of_sum hY hX hA h_indep.symm
  have : Y + X = X + Y := by abel
  rw [this] at J
  have : X - Y = X + Y := ZModModule.sub_eq_add _ _
  rw [h_indep.rdist_eq hX hY, sub_eq_add_neg, this]
  linarith

/-- If $X,Y$ are independent, then
  $$ \rho(X | X+Y) \leq \frac{1}{2}(\rho(X)+\rho(Y) + d[X;Y]).$$ -/
lemma condRho_of_sum_le [IsProbabilityMeasure Œº]
    (hX : Measurable X) (hY : Measurable Y) (hA : A.Nonempty) (h_indep : IndepFun X Y Œº) :
    œÅ[X | X + Y ; Œº # A] ‚â§ (œÅ[X ; Œº # A] + œÅ[Y ; Œº # A] + d[ X ; Œº # Y ; Œº ]) / 2 := by
  have I : œÅ[X | X + Y ; Œº # A] ‚â§ œÅ[X ; Œº # A] + (H[X ; Œº] - H[X | X + Y ; Œº]) / 2 :=
    condRho_le hX (by fun_prop) hA
  have I' : H[X ; Œº] - H[X | X + Y ; Œº] = H[X + Y ; Œº] - H[Y ; Œº] := by
    rw [ProbabilityTheory.chain_rule'' _ hX (by fun_prop), entropy_add_right hX hY,
      IndepFun.entropy_pair_eq_add hX hY h_indep]
    abel
  have J : œÅ[Y | Y + X ; Œº # A] ‚â§ œÅ[Y ; Œº # A] + (H[Y ; Œº] - H[Y | Y + X ; Œº]) / 2 :=
    condRho_le hY (by fun_prop) hA
  have J' : H[Y ; Œº] - H[Y | Y + X ; Œº] = H[Y + X ; Œº] - H[X ; Œº] := by
    rw [ProbabilityTheory.chain_rule'' _ hY (by fun_prop), entropy_add_right hY hX,
      IndepFun.entropy_pair_eq_add hY hX h_indep.symm]
    abel
  have : Y + X = X + Y := by abel
  simp only [this] at J J'
  have : œÅ[X | X + Y ; Œº # A] = œÅ[Y | X + Y ; Œº # A] := by
    simp only [condRho]
    congr with s
    congr 1
    have : œÅ[X ; Œº[|(X + Y) ‚Åª¬π' {s}] # A] = œÅ[fun œâ ‚Ü¶ X œâ + s ; Œº[|(X + Y) ‚Åª¬π' {s}] # A] := by
      rw [rho_of_translate hX hA]
    rw [this]
    apply rho_eq_of_identDistrib
    apply IdentDistrib.of_ae_eq (by fun_prop)
    have : MeasurableSet ((X + Y) ‚Åª¬π' {s}) := by
      have : Measurable (X + Y) := by fun_prop
      exact this (measurableSet_singleton _)
    filter_upwards [ae_cond_mem this] with a ha
    simp only [mem_preimage, Pi.add_apply, mem_singleton_iff] at ha
    rw [‚Üê ha]
    nth_rewrite 1 [‚Üê ZModModule.neg_eq_self (X a)]
    abel
  have : X - Y = X + Y := ZModModule.sub_eq_add _ _
  rw [h_indep.rdist_eq hX hY, sub_eq_add_neg, this]
  linarith

end

section phiMinimizer

variable {G : Type uG} [AddCommGroup G] [Fintype G] [hGm : MeasurableSpace G]
[DiscreteMeasurableSpace G] {Œ© : Type*} [MeasureSpace Œ©]
{X Y Z : Œ© ‚Üí G} {A : Finset G}

/-- Given $G$-valued random variables $X,Y$, define
$$ \phi[X;Y] := d[X;Y] + \eta(\rho(X) + \rho(Y))$$. -/
noncomputable def phi {Œ© : Type*} [MeasurableSpace Œ©]
    (X Y : Œ© ‚Üí G) (Œ∑ : ‚Ñù) (A : Finset G) (Œº : Measure Œ©) : ‚Ñù :=
  d[ X ; Œº # Y ; Œº] + Œ∑ * (œÅ[X ; Œº # A] + œÅ[Y ; Œº # A])

/-- Given $G$-valued random variables $X,Y$, define
$$ \phi[X;Y] := d[X;Y] + \eta(\rho(X) + \rho(Y))$$
and define a \emph{$\phi$-minimizer} to be a pair of random variables $X,Y$ which
minimizes $\phi[X;Y]$.-/
def phiMinimizes {Œ© : Type*} [MeasurableSpace Œ©] (X Y : Œ© ‚Üí G) (Œ∑ : ‚Ñù) (A : Finset G)
    (Œº : Measure Œ©) : Prop :=
  ‚àÄ (Œ©' : Type uG) (_ : MeasureSpace Œ©') (X' Y' : Œ©' ‚Üí G),
    IsProbabilityMeasure (‚Ñô : Measure Œ©') ‚Üí Measurable X' ‚Üí Measurable Y' ‚Üí
    phi X Y Œ∑ A Œº ‚â§ phi X' Y' Œ∑ A ‚Ñô

lemma phiMinimizes_of_identDistrib {Œ©' : Type*} [MeasureSpace Œ©']
    {X Y : Œ© ‚Üí G} {X' Y' : Œ©' ‚Üí G} {Œ∑ : ‚Ñù} {A : Finset G}
    (h_min : phiMinimizes X Y Œ∑ A ‚Ñô) (h‚ÇÅ : IdentDistrib X X') (h‚ÇÇ : IdentDistrib Y Y') :
    phiMinimizes X' Y' Œ∑ A ‚Ñô := by
  have : phi X Y Œ∑ A ‚Ñô = phi X' Y' Œ∑ A ‚Ñô := by
    simp only [phi]
    rw [h‚ÇÅ.rdist_eq h‚ÇÇ, rho_eq_of_identDistrib h‚ÇÅ, rho_eq_of_identDistrib h‚ÇÇ]
  simpa [phiMinimizes, this] using h_min

lemma phiMinimizes_comm [IsProbabilityMeasure (‚Ñô : Measure Œ©)] {X Y : Œ© ‚Üí G} {Œ∑ : ‚Ñù} {A : Finset G}
    (h_min : phiMinimizes X Y Œ∑ A ‚Ñô) : phiMinimizes Y X Œ∑ A ‚Ñô := by
  have : phi Y X Œ∑ A ‚Ñô = phi X Y Œ∑ A ‚Ñô := by
    simp only [phi]
    rw [rdist_symm]
    linarith
  simpa [phiMinimizes, this] using h_min

variable {Œ∑ : ‚Ñù} (hŒ∑ : 0 < Œ∑)

/-- There exists a $\phi$-minimizer. -/
lemma phi_min_exists (hA : A.Nonempty) : ‚àÉ (Œº : Measure (G √ó G)), IsProbabilityMeasure Œº ‚àß
    phiMinimizes Prod.fst Prod.snd Œ∑ A Œº := by
  let _i : TopologicalSpace G := (‚ä• : TopologicalSpace G)
  have : DiscreteTopology G := ‚ü®rfl‚ü©
  let iG : Inhabited G := ‚ü®0‚ü©
  have T : Continuous (fun (Œº : ProbabilityMeasure (G √ó G)) ‚Ü¶ phi Prod.fst Prod.snd Œ∑ A Œº) := by
    apply continuous_iff_continuousAt.2 (fun Œº ‚Ü¶ ?_)
    apply Tendsto.add
    ¬∑ apply tendsto_rdist_probabilityMeasure continuous_fst continuous_snd tendsto_id
    apply Tendsto.const_mul
    apply Tendsto.add
    ¬∑ apply tendsto_rho_probabilityMeasure continuous_fst hA tendsto_id
    ¬∑ apply tendsto_rho_probabilityMeasure continuous_snd hA tendsto_id
  obtain ‚ü®Œº, _, hŒº‚ü© := @IsCompact.exists_isMinOn ‚Ñù (ProbabilityMeasure (G √ó G))
                          _ _ _ _ Set.univ isCompact_univ ‚ü®default, trivial‚ü© _ T.continuousOn
  refine ‚ü®Œº, by infer_instance, ?_‚ü©
  intro Œ©' mŒ©' X' Y' hP hX' hY'
  let ŒΩ : Measure (G √ó G) := Measure.map (‚ü®X', Y'‚ü©) ‚Ñô
  have : IsProbabilityMeasure ŒΩ := isProbabilityMeasure_map (by fun_prop)
  let ŒΩ' : ProbabilityMeasure (G √ó G) := ‚ü®ŒΩ, this‚ü©
  have : phi Prod.fst Prod.snd Œ∑ A ‚ÜëŒº ‚â§ phi Prod.fst Prod.snd Œ∑ A ‚ÜëŒΩ' := hŒº (mem_univ _)
  apply this.trans_eq
  have h‚ÇÅ : IdentDistrib Prod.fst X' (ŒΩ' : Measure (G √ó G)) ‚Ñô := by
    refine ‚ü®measurable_fst.aemeasurable, hX'.aemeasurable, ?_‚ü©
    simp only [ProbabilityMeasure.coe_mk, ŒΩ', ŒΩ]
    rw [Measure.map_map measurable_fst (by fun_prop)]
    rfl
  have h‚ÇÇ : IdentDistrib Prod.snd Y' (ŒΩ' : Measure (G √ó G)) ‚Ñô := by
    refine ‚ü®measurable_snd.aemeasurable, hY'.aemeasurable, ?_‚ü©
    simp only [ProbabilityMeasure.coe_mk, ŒΩ', ŒΩ]
    rw [Measure.map_map measurable_snd (by fun_prop)]
    rfl
  simp [phi, h‚ÇÅ.rdist_eq h‚ÇÇ, rho_eq_of_identDistrib h‚ÇÅ, rho_eq_of_identDistrib h‚ÇÇ]

-- Let $(X_1, X_2)$ be a $\phi$-minimizer, and $\tilde X_1, \tilde X_2$ be independent copies
-- of $X_1,X_2$ respectively.
variable {X‚ÇÅ X‚ÇÇ X‚ÇÅ' X‚ÇÇ' : Œ© ‚Üí G} (h_min : phiMinimizes X‚ÇÅ X‚ÇÇ Œ∑ A ‚Ñô)
  (h‚ÇÅ : IdentDistrib X‚ÇÅ X‚ÇÅ')
  (h‚ÇÇ : IdentDistrib X‚ÇÇ X‚ÇÇ')
  (h_indep : iIndepFun (fun _ ‚Ü¶ hGm) ![X‚ÇÅ, X‚ÇÇ, X‚ÇÅ', X‚ÇÇ'])
  (hX‚ÇÅ : Measurable X‚ÇÅ) (hX‚ÇÇ : Measurable X‚ÇÇ) (hX‚ÇÅ' : Measurable X‚ÇÅ') (hX‚ÇÇ' : Measurable X‚ÇÇ')

local notation3 "I‚ÇÅ" => I[X‚ÇÅ + X‚ÇÇ : X‚ÇÅ' + X‚ÇÇ | X‚ÇÅ + X‚ÇÇ + X‚ÇÅ' + X‚ÇÇ']
local notation3 "I‚ÇÇ" => I[X‚ÇÅ + X‚ÇÇ : X‚ÇÅ + X‚ÇÅ' | X‚ÇÅ + X‚ÇÇ + X‚ÇÅ' + X‚ÇÇ']
/-- `k := d[X‚ÇÅ # X‚ÇÇ]`, the Ruzsa distance `rdist` between X‚ÇÅ and X‚ÇÇ. -/
local notation3 "k" => d[X‚ÇÅ # X‚ÇÇ]

lemma le_rdist_of_phiMinimizes (h_min : phiMinimizes X‚ÇÅ X‚ÇÇ Œ∑ A ‚Ñô)
    {Œ©‚ÇÅ Œ©‚ÇÇ : Type*} [MeasurableSpace Œ©‚ÇÅ]
    [MeasurableSpace Œ©‚ÇÇ] {Œº‚ÇÅ : Measure Œ©‚ÇÅ} {Œº‚ÇÇ : Measure Œ©‚ÇÇ}
    [IsProbabilityMeasure Œº‚ÇÅ] [IsProbabilityMeasure Œº‚ÇÇ]
    {X‚ÇÅ' : Œ©‚ÇÅ ‚Üí G} {X‚ÇÇ' : Œ©‚ÇÇ ‚Üí G} (hX‚ÇÅ' : Measurable X‚ÇÅ') (hX‚ÇÇ' : Measurable X‚ÇÇ') :
    d[X‚ÇÅ # X‚ÇÇ] - Œ∑ * (œÅ[X‚ÇÅ' ; Œº‚ÇÅ # A] - œÅ[X‚ÇÅ # A]) - Œ∑ * (œÅ[X‚ÇÇ' ; Œº‚ÇÇ # A] - œÅ[X‚ÇÇ # A])
      ‚â§ d[X‚ÇÅ' ; Œº‚ÇÅ # X‚ÇÇ' ; Œº‚ÇÇ] := by
  let Œ©' : Type uG := G √ó G
  have : IsProbabilityMeasure (Measure.map X‚ÇÅ' Œº‚ÇÅ) := isProbabilityMeasure_map hX‚ÇÅ'.aemeasurable
  have : IsProbabilityMeasure (Measure.map X‚ÇÇ' Œº‚ÇÇ) := isProbabilityMeasure_map hX‚ÇÇ'.aemeasurable
  let m : Measure Œ©' := (Measure.map X‚ÇÅ' Œº‚ÇÅ).prod (Measure.map X‚ÇÇ' Œº‚ÇÇ)
  have m_prob : IsProbabilityMeasure m := by infer_instance
  let _ : MeasureSpace Œ©' := ‚ü®m‚ü©
  have hP : (‚Ñô : Measure Œ©') = m := rfl
  let Y‚ÇÅ : G √ó G ‚Üí G := Prod.fst
  let Y‚ÇÇ : G √ó G ‚Üí G := Prod.snd
  have : phi X‚ÇÅ X‚ÇÇ Œ∑ A ‚Ñô ‚â§ phi Y‚ÇÅ Y‚ÇÇ Œ∑ A ‚Ñô := h_min _ _ _ _ m_prob measurable_fst measurable_snd
  have Id‚ÇÅ : IdentDistrib Y‚ÇÅ X‚ÇÅ' ‚Ñô Œº‚ÇÅ :=
    ‚ü®measurable_fst.aemeasurable, hX‚ÇÅ'.aemeasurable, by simp [Y‚ÇÅ, hP, m]‚ü©
  have Id‚ÇÇ : IdentDistrib Y‚ÇÇ X‚ÇÇ' ‚Ñô Œº‚ÇÇ :=
    ‚ü®measurable_snd.aemeasurable, hX‚ÇÇ'.aemeasurable, by simp [Y‚ÇÇ, hP, m]‚ü©
  have I : d[Y‚ÇÅ # Y‚ÇÇ] = d[X‚ÇÅ' ; Œº‚ÇÅ # X‚ÇÇ' ; Œº‚ÇÇ] := Id‚ÇÅ.rdist_eq Id‚ÇÇ
  have J : œÅ[Y‚ÇÅ # A] = œÅ[X‚ÇÅ' ; Œº‚ÇÅ # A] := rho_eq_of_identDistrib Id‚ÇÅ
  have K : œÅ[Y‚ÇÇ # A] = œÅ[X‚ÇÇ' ; Œº‚ÇÇ # A] := rho_eq_of_identDistrib Id‚ÇÇ
  simp only [phi, I, J, K] at this
  linarith

lemma le_rdist_of_phiMinimizes' (h_min : phiMinimizes X‚ÇÅ X‚ÇÇ Œ∑ A ‚Ñô)
    {Œ©‚ÇÅ Œ©‚ÇÇ : Type*} [MeasurableSpace Œ©‚ÇÅ]
    [MeasurableSpace Œ©‚ÇÇ] {Œº‚ÇÅ : Measure Œ©‚ÇÅ} {Œº‚ÇÇ : Measure Œ©‚ÇÇ}
    [IsProbabilityMeasure Œº‚ÇÅ] [IsProbabilityMeasure Œº‚ÇÇ]
    {X‚ÇÅ' : Œ©‚ÇÅ ‚Üí G} {X‚ÇÇ' : Œ©‚ÇÇ ‚Üí G} (hX‚ÇÅ' : Measurable X‚ÇÅ') (hX‚ÇÇ' : Measurable X‚ÇÇ') :
    d[X‚ÇÅ # X‚ÇÇ] ‚â§ d[X‚ÇÅ' ; Œº‚ÇÅ # X‚ÇÇ' ; Œº‚ÇÇ] +
      Œ∑ * (œÅ[X‚ÇÅ' ; Œº‚ÇÅ # A] - œÅ[X‚ÇÅ # A]) + Œ∑ * (œÅ[X‚ÇÇ' ; Œº‚ÇÇ # A] - œÅ[X‚ÇÇ # A]) := by
  linarith [le_rdist_of_phiMinimizes h_min hX‚ÇÅ' hX‚ÇÇ' (Œº‚ÇÅ := Œº‚ÇÅ) (Œº‚ÇÇ := Œº‚ÇÇ)]

variable [IsProbabilityMeasure (‚Ñô : Measure Œ©)]

lemma condRho_le_condRuzsaDist_of_phiMinimizes {S T : Type*}
    [Fintype S] [MeasurableSpace S] [MeasurableSingletonClass S]
    [Fintype T] [MeasurableSpace T] [MeasurableSingletonClass T]
    (h : phiMinimizes X‚ÇÅ X‚ÇÇ Œ∑ A ‚Ñô) (h1 : Measurable X‚ÇÅ') (h2 : Measurable X‚ÇÇ')
    {Z : Œ© ‚Üí S} {W : Œ© ‚Üí T} (hZ : Measurable Z) (hW : Measurable W) :
    k - Œ∑ * (œÅ[X‚ÇÅ' | Z # A] - œÅ[X‚ÇÅ # A]) - Œ∑ * (œÅ[X‚ÇÇ' | W # A] - œÅ[X‚ÇÇ # A])
      ‚â§ d[X‚ÇÅ' | Z # X‚ÇÇ' | W] := by
  have : IsProbabilityMeasure (Measure.map Z ‚Ñô) := isProbabilityMeasure_map hZ.aemeasurable
  have : IsProbabilityMeasure (Measure.map W ‚Ñô) := isProbabilityMeasure_map hW.aemeasurable
  have hz (a : ‚Ñù) : a = ‚àë z, (‚Ñô (Z ‚Åª¬π' {z})).toReal * a := by
    simp_rw [‚Üê Finset.sum_mul,‚Üê Measure.map_apply hZ (MeasurableSet.singleton _),
      Finset.sum_toReal_measure_singleton]
    simp
  have hw (a : ‚Ñù) : a = ‚àë w, (‚Ñô (W ‚Åª¬π' {w})).toReal * a := by
    simp_rw [‚Üê Finset.sum_mul,‚Üê Measure.map_apply hW (MeasurableSet.singleton _),
      Finset.sum_toReal_measure_singleton]
    simp
  rw [condRuzsaDist_eq_sum' h1 hZ h2 hW, hz d[X‚ÇÅ # X‚ÇÇ],
    hz (œÅ[X‚ÇÅ # A]), hz (Œ∑ * (œÅ[X‚ÇÇ' | W # A] - œÅ[X‚ÇÇ # A])), condRho, tsum_fintype,
    ‚Üê Finset.sum_sub_distrib, Finset.mul_sum, ‚Üê Finset.sum_sub_distrib, ‚Üê Finset.sum_sub_distrib]
  apply Finset.sum_le_sum
  intro z _
  rw [condRho, tsum_fintype, hw œÅ[X‚ÇÇ # A],
    hw ( (‚Ñô (Z ‚Åª¬π' {z})).toReal * k -
    Œ∑ * ((‚Ñô (Z ‚Åª¬π' {z})).toReal * œÅ[X‚ÇÅ' ; ‚Ñô[|Z ‚Åª¬π' {z}] # A] - (‚Ñô (Z ‚Åª¬π' {z})).toReal * œÅ[X‚ÇÅ # A])),
    ‚Üê Finset.sum_sub_distrib, Finset.mul_sum, Finset.mul_sum, ‚Üê Finset.sum_sub_distrib]
  apply Finset.sum_le_sum
  intro w _
  rcases eq_or_ne (‚Ñô (Z ‚Åª¬π' {z})) 0 with hpz | hpz
  ¬∑ simp [hpz]
  rcases eq_or_ne (‚Ñô (W ‚Åª¬π' {w})) 0 with hpw | hpw
  ¬∑ simp [hpw]
  set Œº := ‚Ñô[|Z ‚Üê z]
  have hŒº : IsProbabilityMeasure Œº := cond_isProbabilityMeasure hpz
  set Œº' := ‚Ñô[|W ‚Üê w]
  have hŒº' : IsProbabilityMeasure Œº' := cond_isProbabilityMeasure hpw
  suffices d[X‚ÇÅ # X‚ÇÇ] - Œ∑ * (œÅ[X‚ÇÅ' ; Œº # A] - œÅ[X‚ÇÅ # A]) -
      Œ∑ * (œÅ[X‚ÇÇ' ; Œº' # A] - œÅ[X‚ÇÇ # A]) ‚â§ d[X‚ÇÅ' ; Œº # X‚ÇÇ'; Œº'] by
    replace this := mul_le_mul_of_nonneg_left this
      (show 0 ‚â§ (‚Ñô (Z ‚Åª¬π' {z})).toReal * (‚Ñô (W ‚Åª¬π' {w})).toReal by positivity)
    convert this using 1
    ring
  exact le_rdist_of_phiMinimizes h h1 h2


variable [Module (ZMod 2) G]

/- *****************************************
First estimate
********************************************* -/

include hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep h_min hŒ∑ in
/-- $I_1\le 2\eta d[X_1;X_2]$ -/
lemma I_one_le (hA : A.Nonempty) : I‚ÇÅ ‚â§ 2 * Œ∑ * d[ X‚ÇÅ # X‚ÇÇ ] := by
  have : d[X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ + X‚ÇÅ'] + d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÅ'] + I‚ÇÅ = 2 * k :=
    rdist_add_rdist_add_condMutual_eq _ _ _ _ hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep.reindex_four_abdc
  have : k - Œ∑ * (œÅ[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # A] - œÅ[X‚ÇÅ # A])
      - Œ∑ * (œÅ[X‚ÇÇ | X‚ÇÇ + X‚ÇÅ' # A] - œÅ[X‚ÇÇ # A]) ‚â§ d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÅ'] :=
    condRho_le_condRuzsaDist_of_phiMinimizes h_min hX‚ÇÅ hX‚ÇÇ (by fun_prop) (by fun_prop)
  have : k - Œ∑ * (œÅ[X‚ÇÅ + X‚ÇÇ' # A] - œÅ[X‚ÇÅ # A])
      - Œ∑ * (œÅ[X‚ÇÇ + X‚ÇÅ' # A] - œÅ[X‚ÇÇ # A]) ‚â§ d[X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ + X‚ÇÅ'] :=
    le_rdist_of_phiMinimizes h_min (hX‚ÇÅ.add hX‚ÇÇ') (hX‚ÇÇ.add hX‚ÇÅ')
  have : œÅ[X‚ÇÅ + X‚ÇÇ' # A] ‚â§ (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÇ # A] + d[ X‚ÇÅ # X‚ÇÇ ]) / 2 := by
    rw [rho_eq_of_identDistrib h‚ÇÇ, (IdentDistrib.refl hX‚ÇÅ.aemeasurable).rdist_eq h‚ÇÇ]
    apply rho_of_sum_le hX‚ÇÅ hX‚ÇÇ' hA
    simpa using h_indep.indepFun (show (0 : Fin 4) ‚â† 3 by decide)
  have : œÅ[X‚ÇÇ + X‚ÇÅ' # A] ‚â§ (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÇ # A] + d[ X‚ÇÅ # X‚ÇÇ ]) / 2 := by
    rw [add_comm, rho_eq_of_identDistrib h‚ÇÅ, h‚ÇÅ.rdist_eq (IdentDistrib.refl hX‚ÇÇ.aemeasurable)]
    apply rho_of_sum_le hX‚ÇÅ' hX‚ÇÇ hA
    simpa using h_indep.indepFun (show (2 : Fin 4) ‚â† 1 by decide)
  have : œÅ[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # A] ‚â§ (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÇ # A] + d[ X‚ÇÅ # X‚ÇÇ ]) / 2 := by
    rw [rho_eq_of_identDistrib h‚ÇÇ, (IdentDistrib.refl hX‚ÇÅ.aemeasurable).rdist_eq h‚ÇÇ]
    apply condRho_of_sum_le hX‚ÇÅ hX‚ÇÇ' hA
    simpa using h_indep.indepFun (show (0 : Fin 4) ‚â† 3 by decide)
  have : œÅ[X‚ÇÇ | X‚ÇÇ + X‚ÇÅ' # A] ‚â§ (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÇ # A] + d[ X‚ÇÅ # X‚ÇÇ ]) / 2 := by
    have : œÅ[X‚ÇÇ | X‚ÇÇ + X‚ÇÅ' # A] ‚â§ (œÅ[X‚ÇÇ # A] + œÅ[X‚ÇÅ' # A] + d[ X‚ÇÇ # X‚ÇÅ' ]) / 2 := by
      apply condRho_of_sum_le hX‚ÇÇ hX‚ÇÅ' hA
      simpa using h_indep.indepFun (show (1 : Fin 4) ‚â† 2 by decide)
    have I : œÅ[X‚ÇÅ' # A] = œÅ[X‚ÇÅ # A] := rho_eq_of_identDistrib h‚ÇÅ.symm
    have J : d[X‚ÇÇ # X‚ÇÅ'] = d[X‚ÇÅ # X‚ÇÇ] := by
      rw [rdist_symm, h‚ÇÅ.rdist_eq (IdentDistrib.refl hX‚ÇÇ.aemeasurable)]
    linarith
  nlinarith

/- *****************************************
Second estimate
********************************************* -/

include hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep in
lemma I_two_aux :
    d[X‚ÇÅ # X‚ÇÅ] + d[X‚ÇÇ # X‚ÇÇ] = d[X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ + X‚ÇÅ'] + d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÅ'] + I‚ÇÇ := by
  have Z : d[X‚ÇÅ' # X‚ÇÅ] + d[X‚ÇÇ' # X‚ÇÇ] = d[X‚ÇÅ' + X‚ÇÇ' # X‚ÇÅ + X‚ÇÇ] + d[X‚ÇÅ' | X‚ÇÅ' + X‚ÇÇ' # X‚ÇÅ | X‚ÇÅ + X‚ÇÇ]
      + I[X‚ÇÅ' + X‚ÇÅ : X‚ÇÅ + X‚ÇÇ|X‚ÇÅ' + X‚ÇÅ + X‚ÇÇ' + X‚ÇÇ] :=
    sum_of_rdist_eq_char_2' X‚ÇÅ' X‚ÇÅ X‚ÇÇ' X‚ÇÇ h_indep.reindex_four_cadb hX‚ÇÅ' hX‚ÇÅ hX‚ÇÇ' hX‚ÇÇ
  have C‚ÇÅ : X‚ÇÅ' + X‚ÇÅ + X‚ÇÇ' + X‚ÇÇ = X‚ÇÅ + X‚ÇÇ + X‚ÇÅ' + X‚ÇÇ' := by abel
  have C‚ÇÇ : X‚ÇÅ' + X‚ÇÅ = X‚ÇÅ + X‚ÇÅ' := by abel
  have C‚ÇÉ : d[X‚ÇÅ' # X‚ÇÅ] = d[X‚ÇÅ # X‚ÇÅ] := h‚ÇÅ.symm.rdist_eq (IdentDistrib.refl hX‚ÇÅ.aemeasurable)
  have C‚ÇÑ : d[X‚ÇÇ' # X‚ÇÇ] = d[X‚ÇÇ # X‚ÇÇ] := h‚ÇÇ.symm.rdist_eq (IdentDistrib.refl hX‚ÇÇ.aemeasurable)
  have C‚ÇÖ : d[X‚ÇÅ' + X‚ÇÇ' # X‚ÇÅ + X‚ÇÇ] = d[X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ + X‚ÇÅ'] := by
    apply IdentDistrib.rdist_eq
    ¬∑ apply IdentDistrib.add h‚ÇÅ.symm (IdentDistrib.refl hX‚ÇÇ'.aemeasurable)
      ¬∑ simpa using h_indep.indepFun (show (2 : Fin 4) ‚â† 3 by decide)
      ¬∑ simpa using h_indep.indepFun (show (0 : Fin 4) ‚â† 3 by decide)
    ¬∑ rw [add_comm]
      apply IdentDistrib.add (IdentDistrib.refl hX‚ÇÇ.aemeasurable) h‚ÇÅ
      ¬∑ simpa using h_indep.indepFun (show (1 : Fin 4) ‚â† 0 by decide)
      ¬∑ simpa using h_indep.indepFun (show (1 : Fin 4) ‚â† 2 by decide)
  have C‚ÇÜ : d[X‚ÇÅ' | X‚ÇÅ' + X‚ÇÇ' # X‚ÇÅ | X‚ÇÅ + X‚ÇÇ] = d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÅ'] := by
    have A : d[X‚ÇÅ' | X‚ÇÅ' + X‚ÇÇ' # X‚ÇÅ | X‚ÇÅ + X‚ÇÇ] = d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÅ' | X‚ÇÇ + X‚ÇÅ'] := by
      apply condRuzsaDist_of_copy hX‚ÇÅ' (by fun_prop) hX‚ÇÅ (by fun_prop) hX‚ÇÅ (by fun_prop) hX‚ÇÅ'
        (by fun_prop)
      ¬∑ have : IdentDistrib (‚ü®X‚ÇÅ', X‚ÇÇ'‚ü©) (‚ü®X‚ÇÅ, X‚ÇÇ'‚ü©) := by
          apply h‚ÇÅ.symm.prod_mk (IdentDistrib.refl hX‚ÇÇ'.aemeasurable)
          ¬∑ simpa using h_indep.indepFun (show (2 : Fin 4) ‚â† 3 by decide)
          ¬∑ simpa using h_indep.indepFun (show (0 : Fin 4) ‚â† 3 by decide)
        exact this.comp (u := fun (a : G √ó G) ‚Ü¶ (a.1, a.1 + a.2)) (by fun_prop)
      ¬∑ rw [add_comm]
        have : IdentDistrib (‚ü®X‚ÇÅ, X‚ÇÇ‚ü©) (‚ü®X‚ÇÅ', X‚ÇÇ‚ü©) := by
          apply h‚ÇÅ.prod_mk (IdentDistrib.refl hX‚ÇÇ.aemeasurable)
          ¬∑ simpa using h_indep.indepFun (show (0 : Fin 4) ‚â† 1 by decide)
          ¬∑ simpa using h_indep.indepFun (show (2 : Fin 4) ‚â† 1 by decide)
        exact this.comp (u := fun (a : G √ó G) ‚Ü¶ (a.1, a.2 + a.1)) (by fun_prop)
    have B : d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÅ' | X‚ÇÇ + X‚ÇÅ'] = d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÅ'] := by
      have J z w : d[X‚ÇÅ ; ‚Ñô[|(X‚ÇÅ + X‚ÇÇ') ‚Åª¬π' {z}] # X‚ÇÅ' ; ‚Ñô[|(X‚ÇÇ + X‚ÇÅ') ‚Åª¬π' {w}]]
          = d[X‚ÇÅ ; ‚Ñô[|(X‚ÇÅ + X‚ÇÇ') ‚Åª¬π' {z}] # X‚ÇÇ ; ‚Ñô[|(X‚ÇÇ + X‚ÇÅ') ‚Åª¬π' {w}]] := by
        rw [‚Üê rdist_add_const hX‚ÇÅ hX‚ÇÇ (c := w)]
        apply ProbabilityTheory.IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÅ.aemeasurable)
        apply IdentDistrib.of_ae_eq hX‚ÇÅ'.aemeasurable
        filter_upwards [ae_cond_mem (hX‚ÇÇ.add hX‚ÇÅ' (measurableSet_singleton _))] with x hx
        simp only [mem_preimage, Pi.add_apply, mem_singleton_iff] at hx
        simp [‚Üê hx, ‚Üê add_assoc, ZModModule.add_self (X‚ÇÇ x)]
      rw [condRuzsaDist_eq_sum' hX‚ÇÅ (by fun_prop) hX‚ÇÅ' (by fun_prop),
        condRuzsaDist_eq_sum' hX‚ÇÅ (by fun_prop) hX‚ÇÇ (by fun_prop)]
      simp [J]
    exact A.trans B
  rwa [condMutualInfo_comm (by fun_prop) (by fun_prop), C‚ÇÅ, C‚ÇÇ, C‚ÇÉ, C‚ÇÑ, C‚ÇÖ, C‚ÇÜ] at Z

include hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep in
/-- $d[X_1;X_1]+d[X_2;X_2]= 2d[X_1;X_2]+(I_2-I_1)$. -/
lemma rdist_add_rdist_eq :
    d[ X‚ÇÅ # X‚ÇÅ ] + d[ X‚ÇÇ # X‚ÇÇ ] = 2 * k + (I‚ÇÇ - I‚ÇÅ) := by
  have : d[X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ + X‚ÇÅ'] + d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÅ'] + I‚ÇÅ = 2 * k :=
    rdist_add_rdist_add_condMutual_eq _ _ _ _ hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep.reindex_four_abdc
  have : d[X‚ÇÅ # X‚ÇÅ] + d[X‚ÇÇ # X‚ÇÇ]
      = d[X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ + X‚ÇÅ'] + d[X‚ÇÅ | X‚ÇÅ + X‚ÇÇ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÅ'] + I‚ÇÇ :=
    I_two_aux h‚ÇÅ h‚ÇÇ h_indep hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ'
  linarith

include hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep in
lemma I_two_aux' :
    2 * k = d[X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ + X‚ÇÇ'] + d[X‚ÇÅ | X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÇ'] + I‚ÇÇ := by
  have Z : d[X‚ÇÇ # X‚ÇÅ] + d[X‚ÇÇ' # X‚ÇÅ'] = d[X‚ÇÇ + X‚ÇÇ' # X‚ÇÅ + X‚ÇÅ'] + d[X‚ÇÇ | X‚ÇÇ + X‚ÇÇ' # X‚ÇÅ | X‚ÇÅ + X‚ÇÅ']
      + I[X‚ÇÇ + X‚ÇÅ : X‚ÇÅ + X‚ÇÅ' | X‚ÇÇ + X‚ÇÅ + X‚ÇÇ' + X‚ÇÅ'] :=
    sum_of_rdist_eq_char_2' X‚ÇÇ X‚ÇÅ X‚ÇÇ' X‚ÇÅ' h_indep.reindex_four_badc hX‚ÇÇ hX‚ÇÅ hX‚ÇÇ' hX‚ÇÅ'
  have C‚ÇÅ : X‚ÇÇ + X‚ÇÅ = X‚ÇÅ + X‚ÇÇ := by abel
  have C‚ÇÇ : X‚ÇÅ + X‚ÇÇ + X‚ÇÇ' + X‚ÇÅ' = X‚ÇÅ + X‚ÇÇ + X‚ÇÅ' + X‚ÇÇ' := by abel
  have C‚ÇÉ : d[X‚ÇÇ # X‚ÇÅ] = d[X‚ÇÅ # X‚ÇÇ] := rdist_symm
  have C‚ÇÑ : d[X‚ÇÇ' # X‚ÇÅ'] = d[X‚ÇÅ # X‚ÇÇ] := by rw [rdist_symm]; exact h‚ÇÅ.symm.rdist_eq h‚ÇÇ.symm
  have C‚ÇÖ : d[X‚ÇÇ + X‚ÇÇ' # X‚ÇÅ + X‚ÇÅ'] = d[X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ + X‚ÇÇ'] := rdist_symm
  have C‚ÇÜ : d[X‚ÇÇ | X‚ÇÇ + X‚ÇÇ' # X‚ÇÅ | X‚ÇÅ + X‚ÇÅ'] = d[X‚ÇÅ | X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÇ'] :=
    condRuzsaDist_symm (by fun_prop) (by fun_prop)
  rw [C‚ÇÅ, C‚ÇÇ, C‚ÇÉ, C‚ÇÑ, C‚ÇÖ] at Z
  linarith

include hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep h_min hŒ∑ in
/-- $I_2\le 2\eta d[X_1;X_2] + \frac{\eta}{1-\eta}(2\eta d[X_1;X_2]-I_1)$. -/
lemma I_two_le (hA : A.Nonempty) (h'Œ∑ : Œ∑ < 1) :
    I‚ÇÇ ‚â§ 2 * Œ∑ * k + (Œ∑ / (1 - Œ∑)) * (2 * Œ∑ * k - I‚ÇÅ) := by
  have W : k - Œ∑ * (œÅ[X‚ÇÅ + X‚ÇÅ' # A] - œÅ[X‚ÇÅ # A]) - Œ∑ * (œÅ[X‚ÇÇ + X‚ÇÇ' # A] - œÅ[X‚ÇÇ # A]) ‚â§
      d[X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ + X‚ÇÇ'] :=
    le_rdist_of_phiMinimizes h_min (hX‚ÇÅ.add hX‚ÇÅ') (hX‚ÇÇ.add hX‚ÇÇ') (Œº‚ÇÅ := ‚Ñô) (Œº‚ÇÇ := ‚Ñô)
  have W' : k - Œ∑ * (œÅ[X‚ÇÅ | X‚ÇÅ + X‚ÇÅ' # A] - œÅ[X‚ÇÅ # A])
      - Œ∑ * (œÅ[X‚ÇÇ | X‚ÇÇ + X‚ÇÇ' # A] - œÅ[X‚ÇÇ # A]) ‚â§ d[X‚ÇÅ | X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÇ'] :=
    condRho_le_condRuzsaDist_of_phiMinimizes h_min hX‚ÇÅ hX‚ÇÇ (hX‚ÇÅ.add hX‚ÇÅ') (hX‚ÇÇ.add hX‚ÇÇ')
  have Z : 2 * k = d[X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ + X‚ÇÇ'] + d[X‚ÇÅ | X‚ÇÅ + X‚ÇÅ' # X‚ÇÇ | X‚ÇÇ + X‚ÇÇ'] + I‚ÇÇ :=
    I_two_aux' h‚ÇÅ h‚ÇÇ h_indep hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ'
  have : œÅ[X‚ÇÅ + X‚ÇÅ' # A] ‚â§ (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÅ # A] + d[ X‚ÇÅ # X‚ÇÅ ]) / 2 := by
    refine (rho_of_sum_le hX‚ÇÅ hX‚ÇÅ' hA
      (by simpa using h_indep.indepFun (show (0 : Fin 4) ‚â† 2 by decide))).trans_eq ?_
    rw [rho_eq_of_identDistrib h‚ÇÅ.symm,
      IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÅ.aemeasurable) h‚ÇÅ]
  have : œÅ[X‚ÇÇ + X‚ÇÇ' # A] ‚â§ (œÅ[X‚ÇÇ # A] + œÅ[X‚ÇÇ # A] + d[ X‚ÇÇ # X‚ÇÇ ]) / 2 := by
    refine (rho_of_sum_le hX‚ÇÇ hX‚ÇÇ' hA
      (by simpa using h_indep.indepFun (show (1 : Fin 4) ‚â† 3 by decide))).trans_eq ?_
    rw [rho_eq_of_identDistrib h‚ÇÇ.symm,
      IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÇ.aemeasurable) h‚ÇÇ]
  have : œÅ[X‚ÇÅ | X‚ÇÅ + X‚ÇÅ' # A] ‚â§ (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÅ # A] + d[ X‚ÇÅ # X‚ÇÅ ]) / 2 := by
    refine (condRho_of_sum_le hX‚ÇÅ hX‚ÇÅ' hA
      (by simpa using h_indep.indepFun (show (0 : Fin 4) ‚â† 2 by decide))).trans_eq ?_
    rw [rho_eq_of_identDistrib h‚ÇÅ.symm,
      IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÅ.aemeasurable) h‚ÇÅ]
  have : œÅ[X‚ÇÇ | X‚ÇÇ + X‚ÇÇ' # A] ‚â§ (œÅ[X‚ÇÇ # A] + œÅ[X‚ÇÇ # A] + d[ X‚ÇÇ # X‚ÇÇ ]) / 2 := by
    refine (condRho_of_sum_le hX‚ÇÇ hX‚ÇÇ' hA
      (by simpa using h_indep.indepFun (show (1 : Fin 4) ‚â† 3 by decide))).trans_eq ?_
    rw [rho_eq_of_identDistrib h‚ÇÇ.symm,
      IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÇ.aemeasurable) h‚ÇÇ]
  have : I‚ÇÇ ‚â§ Œ∑ * (d[X‚ÇÅ # X‚ÇÅ] + d[X‚ÇÇ # X‚ÇÇ]) := by nlinarith
  rw [rdist_add_rdist_eq h‚ÇÅ h‚ÇÇ h_indep hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ'] at this
  have one_eta : 0 < 1 - Œ∑ := by linarith
  apply (mul_le_mul_iff_of_pos_left one_eta).1
  have : (1 - Œ∑) * I‚ÇÇ ‚â§ 2 * Œ∑ * k - I‚ÇÅ * Œ∑ := by linarith
  apply this.trans_eq
  field_simp
  ring

/- ****************************************
End Game
******************************************* -/

include h_min in
omit [IsProbabilityMeasure (‚Ñô : Measure Œ©)] in
/-- If $G$-valued random variables $T_1,T_2,T_3$ satisfy $T_1+T_2+T_3=0$, then
  $$d[X_1;X_2]\le 3\bbI[T_1:T_2\mid T_3] + (2\bbH[T_3]-\bbH[T_1]-\bbH[T_2])+ \eta(\rho(T_1|T_3)+\rho(T_2|T_3)-\rho(X_1)-\rho(X_2)).$$ -/
lemma dist_le_of_sum_zero {Œ©' : Type*} [MeasurableSpace Œ©'] {Œº : Measure Œ©'}
    [IsProbabilityMeasure Œº] {T‚ÇÅ T‚ÇÇ T‚ÇÉ : Œ©' ‚Üí G}
    (hsum : T‚ÇÅ + T‚ÇÇ + T‚ÇÉ = 0) (hT‚ÇÅ : Measurable T‚ÇÅ) (hT‚ÇÇ : Measurable T‚ÇÇ) (hT‚ÇÉ : Measurable T‚ÇÉ) :
    k ‚â§ 3 * I[T‚ÇÅ : T‚ÇÇ ; Œº] + (2 * H[T‚ÇÉ ; Œº] - H[T‚ÇÅ ; Œº] - H[T‚ÇÇ ; Œº])
      + Œ∑ * (œÅ[T‚ÇÅ | T‚ÇÉ ; Œº # A] + œÅ[T‚ÇÇ | T‚ÇÉ ; Œº #  A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A]) := by
  let _ : MeasureSpace Œ©' := ‚ü®Œº‚ü©
  have : Œº = ‚Ñô := rfl
  simp only [this]
  have : ‚àë t, (‚Ñô (T‚ÇÉ ‚Åª¬π' {t})).toReal * d[ X‚ÇÅ # X‚ÇÇ ] ‚â§ ‚àë t, (‚Ñô (T‚ÇÉ ‚Åª¬π' {t})).toReal *
      (d[T‚ÇÅ ; ‚Ñô[|T‚ÇÉ ‚Üê t] # T‚ÇÇ ; ‚Ñô[|T‚ÇÉ ‚Üê t]]
        + Œ∑ * (œÅ[T‚ÇÅ ; ‚Ñô[|T‚ÇÉ ‚Üê t] # A] - œÅ[X‚ÇÅ # A]) + Œ∑ * (œÅ[T‚ÇÇ ; ‚Ñô[|T‚ÇÉ ‚Üê t] # A] - œÅ[X‚ÇÇ # A])) := by
    apply Finset.sum_le_sum (fun t ht ‚Ü¶ ?_)
    rcases eq_or_ne (‚Ñô (T‚ÇÉ ‚Åª¬π' {t})) 0 with h't | h't
    ¬∑ simp [h't]
    have : IsProbabilityMeasure (‚Ñô[|T‚ÇÉ ‚Üê t]) := cond_isProbabilityMeasure h't
    gcongr
    exact le_rdist_of_phiMinimizes' h_min hT‚ÇÅ hT‚ÇÇ
  have : k ‚â§ ‚àë x : G, (‚Ñô (T‚ÇÉ ‚Åª¬π' {x})).toReal * d[T‚ÇÅ ; ‚Ñô[|T‚ÇÉ ‚Üê x] # T‚ÇÇ ; ‚Ñô[|T‚ÇÉ ‚Üê x]] +
      Œ∑ * (œÅ[T‚ÇÅ | T‚ÇÉ # A] - œÅ[X‚ÇÅ # A]) + Œ∑ * (œÅ[T‚ÇÇ | T‚ÇÉ # A] - œÅ[X‚ÇÇ # A]) := by
    have S : ‚àë i : G, (‚Ñô (T‚ÇÉ ‚Åª¬π' {i})).toReal = 1 := by
      have : IsProbabilityMeasure (Measure.map T‚ÇÉ ‚Ñô) := isProbabilityMeasure_map hT‚ÇÉ.aemeasurable
      simp [‚Üê Measure.map_apply hT‚ÇÉ (measurableSet_singleton _)]
    simp_rw [‚Üê Finset.sum_mul, S, mul_add, Finset.sum_add_distrib, ‚Üê mul_assoc, mul_comm _ Œ∑,
      mul_assoc, ‚Üê Finset.mul_sum, mul_sub, Finset.sum_sub_distrib, mul_sub,
      ‚Üê Finset.sum_mul, S] at this
    simpa [mul_sub, condRho, tsum_fintype] using this
  have J : ‚àë x : G, (‚Ñô (T‚ÇÉ ‚Åª¬π' {x})).toReal * d[T‚ÇÅ ; ‚Ñô[|T‚ÇÉ ‚Üê x] # T‚ÇÇ ; ‚Ñô[|T‚ÇÉ ‚Üê x]]
      ‚â§ 3 * I[T‚ÇÅ : T‚ÇÇ] + 2 * H[T‚ÇÉ] - H[T‚ÇÅ] - H[T‚ÇÇ] := by
    have h2T‚ÇÉ : T‚ÇÉ = T‚ÇÅ + T‚ÇÇ :=
      calc T‚ÇÉ = T‚ÇÅ + T‚ÇÇ + T‚ÇÉ - T‚ÇÉ := by rw [hsum, _root_.zero_sub]; simp [ZModModule.neg_eq_self]
        _ = T‚ÇÅ + T‚ÇÇ := by rw [add_sub_cancel_right]
    subst h2T‚ÇÉ
    have := ent_bsg hT‚ÇÅ hT‚ÇÇ (Œº := ‚Ñô)
    simp_rw [integral_fintype _ Integrable.of_finite,
      Measure.map_apply hT‚ÇÉ (measurableSet_singleton _)] at this
    exact this
  linarith

include h_min in
omit [IsProbabilityMeasure (‚Ñô : Measure Œ©)] in
/-- If $G$-valued random variables $T_1,T_2,T_3$ satisfy $T_1+T_2+T_3=0$, then
  $$d[X_1;X_2]\le 3\bbI[T_1:T_2\mid T_3] + (2\bbH[T_3]-\bbH[T_1]-\bbH[T_2])+ \eta(\rho(T_1|T_3)+\rho(T_2|T_3)-\rho(X_1)-\rho(X_2)).$$ -/
lemma dist_le_of_sum_zero_cond {Œ©' : Type*} [MeasureSpace Œ©']
    [IsProbabilityMeasure (‚Ñô : Measure Œ©')] {T‚ÇÅ T‚ÇÇ T‚ÇÉ S : Œ©' ‚Üí G}
    (hsum : T‚ÇÅ + T‚ÇÇ + T‚ÇÉ = 0) (hT‚ÇÅ : Measurable T‚ÇÅ) (hT‚ÇÇ : Measurable T‚ÇÇ) (hT‚ÇÉ : Measurable T‚ÇÉ)
    (hS : Measurable S) :
    k ‚â§ 3 * I[T‚ÇÅ : T‚ÇÇ | S] + (2 * H[T‚ÇÉ | S] - H[T‚ÇÅ | S] - H[T‚ÇÇ | S])
      + Œ∑ * (œÅ[T‚ÇÅ | ‚ü®T‚ÇÉ, S‚ü© # A] + œÅ[T‚ÇÇ | ‚ü®T‚ÇÉ, S‚ü© #  A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A]) := by
  have hw (a : ‚Ñù) : a = ‚àë w, (‚Ñô (S ‚Åª¬π' {w})).toReal * a := by
    have : IsProbabilityMeasure (map S ‚Ñô) := isProbabilityMeasure_map hS.aemeasurable
    simp_rw [‚Üê Finset.sum_mul,‚Üê Measure.map_apply hS (MeasurableSet.singleton _),
      Finset.sum_toReal_measure_singleton]
    simp
  rw [condMutualInfo_eq_sum' hS, condEntropy_eq_sum_fintype _ _ _ hS,
    condEntropy_eq_sum_fintype _ _ _ hS, condEntropy_eq_sum_fintype _ _ _ hS,
    condRho_prod_eq_sum hT‚ÇÉ hS, condRho_prod_eq_sum hT‚ÇÉ hS, hw k, hw œÅ[X‚ÇÅ # A], hw œÅ[X‚ÇÇ # A]]
  simp only [Finset.mul_sum, ‚Üê Finset.sum_sub_distrib, ‚Üê Finset.sum_add_distrib, mul_sub, mul_add]
  gcongr with g hg
  rcases eq_or_ne (‚Ñô (S ‚Åª¬π' {g})) 0 with hpg | hpg
  ¬∑ simp [hpg]
  set Œº := ‚Ñô[|S ‚Üê g]
  have hŒº : IsProbabilityMeasure Œº := cond_isProbabilityMeasure hpg
  have := dist_le_of_sum_zero (Œº := Œº) h_min hsum hT‚ÇÅ hT‚ÇÇ hT‚ÇÉ
  have := mul_le_mul_of_nonneg_left this (show 0 ‚â§ (‚Ñô (S ‚Åª¬π' {g})).toReal by simp)
  linarith

include h_min in
omit [IsProbabilityMeasure (‚Ñô : Measure Œ©)] in
/-- If $G$-valued random variables $T_1,T_2,T_3$ satisfy $T_1+T_2+T_3=0$, then
  $$d[X_1;X_2] \leq \sum_{1 \leq i < j \leq 3} \bbI[T_i:T_j]
  + \frac{\eta}{3} \sum_{1 \leq i < j \leq 3} (\rho(T_i|T_j) + \rho(T_j|T_i) -\rho(X_1)-\rho(X_2))$$
-/
lemma dist_le_of_sum_zero' {Œ©' : Type*} [MeasureSpace Œ©']
    [IsProbabilityMeasure (‚Ñô : Measure Œ©')] {T‚ÇÅ T‚ÇÇ T‚ÇÉ : Œ©' ‚Üí G} (hsum : T‚ÇÅ + T‚ÇÇ + T‚ÇÉ = 0)
    (hT‚ÇÅ : Measurable T‚ÇÅ) (hT‚ÇÇ : Measurable T‚ÇÇ) (hT‚ÇÉ : Measurable T‚ÇÉ) :
    k ‚â§ I[T‚ÇÅ : T‚ÇÇ] + I[T‚ÇÅ : T‚ÇÉ] + I[T‚ÇÇ : T‚ÇÉ]
      + (Œ∑ / 3) * ((œÅ[T‚ÇÅ | T‚ÇÇ # A] + œÅ[T‚ÇÇ | T‚ÇÅ # A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A])
                 + (œÅ[T‚ÇÅ | T‚ÇÉ # A] + œÅ[T‚ÇÉ | T‚ÇÅ # A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A])
                 + (œÅ[T‚ÇÇ | T‚ÇÉ # A] + œÅ[T‚ÇÉ | T‚ÇÇ # A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A])) := by
  have := dist_le_of_sum_zero h_min hsum hT‚ÇÅ hT‚ÇÇ hT‚ÇÉ (Œº := ‚Ñô)
  have : T‚ÇÅ + T‚ÇÉ + T‚ÇÇ = 0 := by convert hsum using 1; abel
  have := dist_le_of_sum_zero h_min this hT‚ÇÅ hT‚ÇÉ hT‚ÇÇ (Œº := ‚Ñô)
  have : T‚ÇÇ + T‚ÇÉ + T‚ÇÅ = 0 := by convert hsum using 1; abel
  have := dist_le_of_sum_zero h_min this hT‚ÇÇ hT‚ÇÉ hT‚ÇÅ (Œº := ‚Ñô)
  linarith

include h_min in
omit [IsProbabilityMeasure (‚Ñô : Measure Œ©)] in
/-- If $G$-valued random variables $T_1,T_2,T_3$ satisfy $T_1+T_2+T_3=0$, then
  $$d[X_1;X_2] \leq \sum_{1 \leq i < j \leq 3} \bbI[T_i:T_j]
  + \frac{\eta}{3} \sum_{1 \leq i < j \leq 3} (\rho(T_i|T_j) + \rho(T_j|T_i) -\rho(X_1)-\rho(X_2))$$
-/
lemma dist_le_of_sum_zero_cond' {Œ©' : Type*} [MeasureSpace Œ©']
    [IsProbabilityMeasure (‚Ñô : Measure Œ©')] {T‚ÇÅ T‚ÇÇ T‚ÇÉ : Œ©' ‚Üí G} (S : Œ©' ‚Üí G)
    (hsum : T‚ÇÅ + T‚ÇÇ + T‚ÇÉ = 0)
    (hT‚ÇÅ : Measurable T‚ÇÅ) (hT‚ÇÇ : Measurable T‚ÇÇ) (hT‚ÇÉ : Measurable T‚ÇÉ) (hS : Measurable S) :
    k ‚â§ I[T‚ÇÅ : T‚ÇÇ | S] + I[T‚ÇÅ : T‚ÇÉ| S] + I[T‚ÇÇ : T‚ÇÉ | S]
      + (Œ∑ / 3) * ((œÅ[T‚ÇÅ | ‚ü®T‚ÇÇ, S‚ü© # A] + œÅ[T‚ÇÇ | ‚ü®T‚ÇÅ, S‚ü© # A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A])
                 + (œÅ[T‚ÇÅ | ‚ü®T‚ÇÉ, S‚ü© # A] + œÅ[T‚ÇÉ | ‚ü®T‚ÇÅ, S‚ü© # A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A])
                 + (œÅ[T‚ÇÇ | ‚ü®T‚ÇÉ, S‚ü© # A] + œÅ[T‚ÇÉ | ‚ü®T‚ÇÇ, S‚ü© # A] - œÅ[X‚ÇÅ # A] - œÅ[X‚ÇÇ # A])) := by
  have := dist_le_of_sum_zero_cond h_min hsum hT‚ÇÅ hT‚ÇÇ hT‚ÇÉ hS
  have : T‚ÇÅ + T‚ÇÉ + T‚ÇÇ = 0 := by convert hsum using 1; abel
  have := dist_le_of_sum_zero_cond h_min this hT‚ÇÅ hT‚ÇÉ hT‚ÇÇ hS
  have : T‚ÇÇ + T‚ÇÉ + T‚ÇÅ = 0 := by convert hsum using 1; abel
  have := dist_le_of_sum_zero_cond h_min this hT‚ÇÇ hT‚ÇÉ hT‚ÇÅ hS
  linarith

lemma new_gen_ineq_aux1 {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : Œ© ‚Üí G}
    (hY‚ÇÅ : Measurable Y‚ÇÅ) (hY‚ÇÇ : Measurable Y‚ÇÇ) (hY‚ÇÉ : Measurable Y‚ÇÉ) (hY‚ÇÑ : Measurable Y‚ÇÑ)
    (h_indep : iIndepFun (fun _ ‚Ü¶ hGm) ![Y‚ÇÅ, Y‚ÇÇ, Y‚ÇÉ, Y‚ÇÑ]) (hA : A.Nonempty) :
    œÅ[Y‚ÇÅ + Y‚ÇÇ | ‚ü®Y‚ÇÅ + Y‚ÇÉ, Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ‚ü© # A] ‚â§
      (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A]) / 4
        + (d[Y‚ÇÅ # Y‚ÇÇ] + d[Y‚ÇÉ # Y‚ÇÑ]) / 4 + (d[Y‚ÇÅ + Y‚ÇÇ # Y‚ÇÉ + Y‚ÇÑ]
          + I[Y‚ÇÅ + Y‚ÇÇ : Y‚ÇÅ + Y‚ÇÉ | Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ]) / 2 := by
  set S := Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ
  set T‚ÇÅ := Y‚ÇÅ + Y‚ÇÇ
  set T‚ÇÇ := Y‚ÇÅ + Y‚ÇÉ
  set T‚ÇÅ' := Y‚ÇÉ + Y‚ÇÑ
  set T‚ÇÇ' := Y‚ÇÇ + Y‚ÇÑ
  have : œÅ[T‚ÇÅ | ‚ü®T‚ÇÇ, S‚ü© # A] ‚â§ œÅ[T‚ÇÅ | S # A] + I[T‚ÇÅ : T‚ÇÇ | S] / 2 := by
    rw [condMutualInfo_eq' (by fun_prop) (by fun_prop) (by fun_prop)]
    exact condRho_prod_le (by fun_prop) (by fun_prop) (by fun_prop) hA
  have : œÅ[T‚ÇÅ | S # A] ‚â§ (œÅ[T‚ÇÅ # A] + œÅ[T‚ÇÅ' # A] + d[T‚ÇÅ # T‚ÇÅ']) / 2 := by
    have S_eq : S = T‚ÇÅ + T‚ÇÅ' := by simp only [S, T‚ÇÅ, T‚ÇÅ']; abel
    rw [S_eq]
    apply condRho_of_sum_le (by fun_prop) (by fun_prop) hA
    exact h_indep.indepFun_add_add (Œπ := Fin 4) (by intro i; fin_cases i <;> assumption) 0 1 2 3
      (by decide) (by decide) (by decide) (by decide)
  have : œÅ[T‚ÇÅ # A] ‚â§ (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + d[Y‚ÇÅ # Y‚ÇÇ]) / 2 :=
    rho_of_sum_le hY‚ÇÅ hY‚ÇÇ hA (h_indep.indepFun (i := 0) (j := 1) (by decide))
  have : œÅ[T‚ÇÅ' # A] ‚â§ (œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A] + d[Y‚ÇÉ # Y‚ÇÑ]) / 2 :=
    rho_of_sum_le hY‚ÇÉ hY‚ÇÑ hA (h_indep.indepFun (i := 2) (j := 3) (by decide))
  linarith

lemma new_gen_ineq_aux2 {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : Œ© ‚Üí G}
    (hY‚ÇÅ : Measurable Y‚ÇÅ) (hY‚ÇÇ : Measurable Y‚ÇÇ) (hY‚ÇÉ : Measurable Y‚ÇÉ) (hY‚ÇÑ : Measurable Y‚ÇÑ)
    (h_indep : iIndepFun (fun _ ‚Ü¶ hGm) ![Y‚ÇÅ, Y‚ÇÇ, Y‚ÇÉ, Y‚ÇÑ]) (hA : A.Nonempty) :
    œÅ[Y‚ÇÅ + Y‚ÇÇ | ‚ü®Y‚ÇÅ + Y‚ÇÉ, Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ‚ü© # A] ‚â§
       (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A]) / 4
        + (d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ]) / 4 + d[Y‚ÇÅ | Y‚ÇÅ + Y‚ÇÉ # Y‚ÇÇ | Y‚ÇÇ + Y‚ÇÑ] / 2 := by
  set S := Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ
  set T‚ÇÅ := Y‚ÇÅ + Y‚ÇÇ
  set T‚ÇÇ := Y‚ÇÅ + Y‚ÇÉ
  set T‚ÇÅ' := Y‚ÇÉ + Y‚ÇÑ
  set T‚ÇÇ' := Y‚ÇÇ + Y‚ÇÑ
  have I : IndepFun (‚ü®Y‚ÇÅ, Y‚ÇÉ‚ü©) (‚ü®Y‚ÇÇ, Y‚ÇÑ‚ü©) := by
    refine (h_indep.indepFun_prod_mk_prod_mk ?_ 0 2 1 3
      (by decide) (by decide) (by decide) (by decide))
    intro i; fin_cases i <;> assumption
  calc
  œÅ[Y‚ÇÅ + Y‚ÇÇ | ‚ü®T‚ÇÇ, S‚ü© # A]
    = œÅ[Y‚ÇÅ + Y‚ÇÇ | ‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© # A] := by
      have : S = T‚ÇÇ + T‚ÇÇ' := by simp only [S, T‚ÇÇ, T‚ÇÇ']; abel
      rw [this]
      let e : G √ó G ‚âÉ G √ó G :=
        { toFun := fun p ‚Ü¶ ‚ü®p.1, p.1 + p.2‚ü©
          invFun := fun p ‚Ü¶ ‚ü®p.1, p.2 - p.1‚ü©
          left_inv := by intro ‚ü®a, b‚ü©; simp [add_assoc]
          right_inv := by intro ‚ü®a, b‚ü©; simp [add_assoc] }
      exact condRho_of_injective T‚ÇÅ (‚ü®T‚ÇÇ, T‚ÇÇ'‚ü©) (f := e) (A := A) e.injective
  _ = ‚àë w, (‚Ñô (‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Åª¬π' {w})).toReal * œÅ[Y‚ÇÅ + Y‚ÇÇ ; ‚Ñô[|‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Üê w] # A] := by
    rw [condRho, tsum_fintype]
  _ ‚â§ ‚àë w, (‚Ñô (‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Åª¬π' {w})).toReal * ((œÅ[Y‚ÇÅ ; ‚Ñô[|‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Üê w] # A]
      + œÅ[Y‚ÇÇ ; ‚Ñô[|‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Üê w] # A] + d[Y‚ÇÅ ; ‚Ñô[|‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Üê w] # Y‚ÇÇ ; ‚Ñô[|‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Üê w]]) / 2) := by
    gcongr with w hw
    have : IndepFun Y‚ÇÅ Y‚ÇÇ (‚Ñô[|‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Åª¬π' {w}]) := by
      have E : (‚ü®Y‚ÇÅ, Y‚ÇÉ‚ü©)‚Åª¬π' {p | p.1 + p.2 = w.1} ‚à© (‚ü®Y‚ÇÇ, Y‚ÇÑ‚ü©)‚Åª¬π' {p | p.1 + p.2 = w.2}
        = ‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© ‚Åª¬π' {w} := by aesop
      have I : IndepFun (‚ü®Y‚ÇÅ, Y‚ÇÉ‚ü©) (‚ü®Y‚ÇÇ, Y‚ÇÑ‚ü©) (‚Ñô[|(‚ü®Y‚ÇÅ, Y‚ÇÉ‚ü©)‚Åª¬π' {p | p.1 + p.2 = w.1}
          ‚à© (‚ü®Y‚ÇÇ, Y‚ÇÑ‚ü©)‚Åª¬π' {p | p.1 + p.2 = w.2}]) :=
        I.cond (measurable_add (.singleton w.1))
          (measurable_add (.singleton w.2)) (hY‚ÇÅ.prod_mk hY‚ÇÉ) (hY‚ÇÇ.prod_mk hY‚ÇÑ)
      rw [E] at I
      exact I.comp measurable_fst measurable_fst
    exact rho_of_sum_le hY‚ÇÅ hY‚ÇÇ hA this
  _ = (œÅ[Y‚ÇÅ | ‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© # A] + œÅ[Y‚ÇÇ | ‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© # A] + d[Y‚ÇÅ | T‚ÇÇ # Y‚ÇÇ | T‚ÇÇ']) / 2 := by
    simp_rw [‚Üê mul_div_assoc, ‚Üê Finset.sum_div, mul_add, Finset.sum_add_distrib, condRho,
      tsum_fintype]
    congr
    rw [condRuzsaDist_eq_sum' hY‚ÇÅ (by fun_prop) hY‚ÇÇ (by fun_prop), Fintype.sum_prod_type]
    congr with x
    congr with y
    have : (‚ü®T‚ÇÇ, T‚ÇÇ'‚ü©) ‚Åª¬π' {(x, y)} = (Y‚ÇÅ + Y‚ÇÉ) ‚Åª¬π' {x} ‚à© (Y‚ÇÇ + Y‚ÇÑ) ‚Åª¬π' {y} := by
      ext p; simp [T‚ÇÇ, T‚ÇÇ']
    rw [this]
    have J : IndepFun (Y‚ÇÅ + Y‚ÇÉ) (Y‚ÇÇ + Y‚ÇÑ) := by exact I.comp measurable_add measurable_add
    rw [J.measure_inter_preimage_eq_mul _ _ (.singleton x)
      (.singleton y), ENNReal.toReal_mul]
    rcases eq_or_ne (‚Ñô ((Y‚ÇÅ + Y‚ÇÉ) ‚Åª¬π' {x})) 0 with h1|h1
    ¬∑ simp [h1]
    rcases eq_or_ne (‚Ñô ((Y‚ÇÇ + Y‚ÇÑ) ‚Åª¬π' {y})) 0 with h2|h2
    ¬∑ simp [h2]
    congr 1
    have A : IdentDistrib Y‚ÇÅ Y‚ÇÅ (‚Ñô[|(Y‚ÇÅ + Y‚ÇÉ) ‚Åª¬π' {x} ‚à© (Y‚ÇÇ + Y‚ÇÑ) ‚Åª¬π' {y}])
        (‚Ñô[|(Y‚ÇÅ + Y‚ÇÉ) ‚Åª¬π' {x}]) := by
      rw [‚Üê cond_cond_eq_cond_inter']
      have : IsProbabilityMeasure (‚Ñô[|(Y‚ÇÅ + Y‚ÇÉ) ‚Åª¬π' {x}]) := cond_isProbabilityMeasure h1
      apply (IndepFun.identDistrib_cond _ (.singleton _) hY‚ÇÅ (by fun_prop) _).symm
      ¬∑ have : IndepFun (‚ü®Y‚ÇÅ, Y‚ÇÉ‚ü©) (‚ü®Y‚ÇÇ, Y‚ÇÑ‚ü©) (‚Ñô[|(‚ü®Y‚ÇÅ, Y‚ÇÉ‚ü©) ‚Åª¬π' {p | p.1 + p.2 = x}]) :=
          I.cond_left (measurable_add (.singleton x))
            (hY‚ÇÅ.prod_mk hY‚ÇÉ)
        exact this.comp measurable_fst measurable_add
      ¬∑ rw [cond_apply, J.measure_inter_preimage_eq_mul _ _ (.singleton x) (.singleton y)]
        simp [h1, h2]
        ¬∑ exact hY‚ÇÅ.add hY‚ÇÉ (.singleton _)
      ¬∑ exact hY‚ÇÅ.add hY‚ÇÉ (.singleton _)
      ¬∑ exact hY‚ÇÇ.add hY‚ÇÑ (.singleton _)
      ¬∑ finiteness
    have B : IdentDistrib Y‚ÇÇ Y‚ÇÇ (‚Ñô[|(Y‚ÇÅ + Y‚ÇÉ) ‚Åª¬π' {x} ‚à© (Y‚ÇÇ + Y‚ÇÑ) ‚Åª¬π' {y}])
        (‚Ñô[|(Y‚ÇÇ + Y‚ÇÑ) ‚Åª¬π' {y}]) := by
      rw [Set.inter_comm, ‚Üê cond_cond_eq_cond_inter']
      have : IsProbabilityMeasure (‚Ñô[|(Y‚ÇÇ + Y‚ÇÑ) ‚Åª¬π' {y}]) := cond_isProbabilityMeasure h2
      apply (IndepFun.identDistrib_cond _ (.singleton _) hY‚ÇÇ (hY‚ÇÅ.add hY‚ÇÉ) _).symm
      ¬∑ have : IndepFun (‚ü®Y‚ÇÇ, Y‚ÇÑ‚ü©) (‚ü®Y‚ÇÅ, Y‚ÇÉ‚ü©) (‚Ñô[|(‚ü®Y‚ÇÇ, Y‚ÇÑ‚ü©) ‚Åª¬π' {p | p.1 + p.2 = y}]) :=
          I.symm.cond_left (measurable_add (.singleton y))
            (hY‚ÇÇ.prod_mk hY‚ÇÑ)
        exact this.comp measurable_fst measurable_add
      ¬∑ rw [Pi.add_def, cond_apply (hY‚ÇÇ.add hY‚ÇÑ (.singleton y)), ‚Üê Pi.add_def, ‚Üê Pi.add_def,
          J.symm.measure_inter_preimage_eq_mul _ _ (.singleton _) (.singleton _)]
        simp [h1, h2]
      ¬∑ exact hY‚ÇÇ.add hY‚ÇÑ (.singleton _)
      ¬∑ exact hY‚ÇÅ.add hY‚ÇÉ (.singleton _)
      ¬∑ finiteness
    exact IdentDistrib.rdist_eq A B
  _ = (œÅ[Y‚ÇÅ | T‚ÇÇ # A] + œÅ[Y‚ÇÇ | T‚ÇÇ' # A] + d[Y‚ÇÅ | T‚ÇÇ # Y‚ÇÇ | T‚ÇÇ']) / 2 := by
    congr 3
    ¬∑ apply condRho_prod_eq_of_indepFun hY‚ÇÅ (by fun_prop) (by fun_prop)
      exact I.comp (measurable_fst.prod_mk measurable_add) measurable_add
    ¬∑ have : œÅ[Y‚ÇÇ | ‚ü®T‚ÇÇ, T‚ÇÇ'‚ü© # A] = œÅ[Y‚ÇÇ | ‚ü®T‚ÇÇ', T‚ÇÇ‚ü© # A] :=
        condRho_of_injective Y‚ÇÇ (‚ü®T‚ÇÇ', T‚ÇÇ‚ü©) (f := Prod.swap) Prod.swap_injective
      rw [this]
      apply condRho_prod_eq_of_indepFun hY‚ÇÇ (by fun_prop) (by fun_prop)
      exact I.symm.comp (measurable_fst.prod_mk measurable_add) measurable_add
  _ ‚â§ ((œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÉ # A] + d[Y‚ÇÅ # Y‚ÇÉ]) / 2 +
       (œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÑ # A] + d[Y‚ÇÇ # Y‚ÇÑ]) / 2 + d[Y‚ÇÅ | T‚ÇÇ # Y‚ÇÇ | T‚ÇÇ']) / 2 := by
    gcongr
    ¬∑ exact condRho_of_sum_le hY‚ÇÅ hY‚ÇÉ hA (h_indep.indepFun (i := 0) (j := 2) (by decide))
    ¬∑ exact condRho_of_sum_le hY‚ÇÇ hY‚ÇÑ hA (h_indep.indepFun (i := 1) (j := 3) (by decide))
  _ = (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A]) / 4
        + (d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ]) / 4 + d[Y‚ÇÅ | Y‚ÇÅ + Y‚ÇÉ # Y‚ÇÇ | Y‚ÇÇ + Y‚ÇÑ] / 2 := by ring

lemma new_gen_ineq {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : Œ© ‚Üí G}
    (hY‚ÇÅ : Measurable Y‚ÇÅ) (hY‚ÇÇ : Measurable Y‚ÇÇ) (hY‚ÇÉ : Measurable Y‚ÇÉ) (hY‚ÇÑ : Measurable Y‚ÇÑ)
    (h_indep : iIndepFun (fun _ ‚Ü¶ hGm) ![Y‚ÇÅ, Y‚ÇÇ, Y‚ÇÉ, Y‚ÇÑ]) (hA : A.Nonempty) :
    œÅ[Y‚ÇÅ + Y‚ÇÇ | ‚ü®Y‚ÇÅ + Y‚ÇÉ, Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ‚ü© # A] ‚â§
      (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A]) / 4
        + (d[Y‚ÇÅ # Y‚ÇÇ] + d[Y‚ÇÉ # Y‚ÇÑ] + d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ]) / 8 + (d[Y‚ÇÅ + Y‚ÇÇ # Y‚ÇÉ + Y‚ÇÑ]
          + I[Y‚ÇÅ + Y‚ÇÇ : Y‚ÇÅ + Y‚ÇÉ | Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ] + d[Y‚ÇÅ | Y‚ÇÅ + Y‚ÇÉ # Y‚ÇÇ | Y‚ÇÇ + Y‚ÇÑ]) / 4 := by
  have := new_gen_ineq_aux1 hY‚ÇÅ hY‚ÇÇ hY‚ÇÉ hY‚ÇÑ h_indep hA
  have := new_gen_ineq_aux2 hY‚ÇÅ hY‚ÇÇ hY‚ÇÉ hY‚ÇÑ h_indep hA
  linarith

/-- For independent random variables $Y_1,Y_2,Y_3,Y_4$ over $G$, define
$S:=Y_1+Y_2+Y_3+Y_4$, $T_1:=Y_1+Y_2$, $T_2:=Y_1+Y_3$. Then
  $$\rho(T_1|T_2,S)+\rho(T_2|T_1,S) - \frac{1}{2}\sum_{i} \rho(Y_i)
    \le \frac{1}{2}(d[Y_1;Y_2]+d[Y_3;Y_4]+d[Y_1;Y_3]+d[Y_2;Y_4]).$$
-/
lemma condRho_sum_le {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : Œ© ‚Üí G}
    (hY‚ÇÅ : Measurable Y‚ÇÅ) (hY‚ÇÇ : Measurable Y‚ÇÇ) (hY‚ÇÉ : Measurable Y‚ÇÉ) (hY‚ÇÑ : Measurable Y‚ÇÑ)
    (h_indep : iIndepFun (fun _ ‚Ü¶ hGm) ![Y‚ÇÅ, Y‚ÇÇ, Y‚ÇÉ, Y‚ÇÑ]) (hA : A.Nonempty) :
    œÅ[Y‚ÇÅ + Y‚ÇÇ | ‚ü®Y‚ÇÅ + Y‚ÇÉ, Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ‚ü© # A] + œÅ[Y‚ÇÅ + Y‚ÇÉ | ‚ü®Y‚ÇÅ + Y‚ÇÇ, Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ‚ü© # A] -
      (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A]) / 2 ‚â§
        (d[Y‚ÇÅ # Y‚ÇÇ] + d[Y‚ÇÉ # Y‚ÇÑ] + d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ]) / 2 := by
  set S := Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ
  set T‚ÇÅ := Y‚ÇÅ + Y‚ÇÇ
  set T‚ÇÇ := Y‚ÇÅ + Y‚ÇÉ
  set T‚ÇÅ' := Y‚ÇÉ + Y‚ÇÑ
  set T‚ÇÇ' := Y‚ÇÇ + Y‚ÇÑ
  have J : œÅ[T‚ÇÅ | ‚ü®T‚ÇÇ, S‚ü© # A] ‚â§
    (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A]) / 4
      + (d[Y‚ÇÅ # Y‚ÇÇ] + d[Y‚ÇÉ # Y‚ÇÑ] + d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ]) / 8 + (d[Y‚ÇÅ + Y‚ÇÇ # Y‚ÇÉ + Y‚ÇÑ]
        + I[Y‚ÇÅ + Y‚ÇÇ : Y‚ÇÅ + Y‚ÇÉ | Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ] + d[Y‚ÇÅ | Y‚ÇÅ + Y‚ÇÉ # Y‚ÇÇ | Y‚ÇÇ + Y‚ÇÑ]) / 4 :=
    new_gen_ineq hY‚ÇÅ hY‚ÇÇ hY‚ÇÉ hY‚ÇÑ h_indep hA
  have J' : œÅ[T‚ÇÇ | ‚ü®T‚ÇÅ, Y‚ÇÅ + Y‚ÇÉ + Y‚ÇÇ + Y‚ÇÑ‚ü© # A] ‚â§
    (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÑ # A]) / 4
      + (d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ] + d[Y‚ÇÅ # Y‚ÇÇ] + d[Y‚ÇÉ # Y‚ÇÑ]) / 8 + (d[Y‚ÇÅ + Y‚ÇÉ # Y‚ÇÇ + Y‚ÇÑ]
        + I[Y‚ÇÅ + Y‚ÇÉ : Y‚ÇÅ + Y‚ÇÇ|Y‚ÇÅ + Y‚ÇÉ + Y‚ÇÇ + Y‚ÇÑ] + d[Y‚ÇÅ | Y‚ÇÅ + Y‚ÇÇ # Y‚ÇÉ | Y‚ÇÉ + Y‚ÇÑ]) / 4 :=
    new_gen_ineq hY‚ÇÅ hY‚ÇÉ hY‚ÇÇ hY‚ÇÑ h_indep.reindex_four_acbd hA
  have : Y‚ÇÅ + Y‚ÇÉ + Y‚ÇÇ + Y‚ÇÑ = S := by simp only [S]; abel
  rw [this] at J'
  have : d[Y‚ÇÅ + Y‚ÇÇ # Y‚ÇÉ + Y‚ÇÑ] + I[Y‚ÇÅ + Y‚ÇÇ : Y‚ÇÅ + Y‚ÇÉ | Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ]
    + d[Y‚ÇÅ | Y‚ÇÅ + Y‚ÇÉ # Y‚ÇÇ | Y‚ÇÇ + Y‚ÇÑ] + d[Y‚ÇÅ + Y‚ÇÉ # Y‚ÇÇ + Y‚ÇÑ]
    + I[Y‚ÇÅ + Y‚ÇÉ : Y‚ÇÅ + Y‚ÇÇ|S] + d[Y‚ÇÅ | Y‚ÇÅ + Y‚ÇÇ # Y‚ÇÉ | Y‚ÇÉ + Y‚ÇÑ]
      = (d[Y‚ÇÅ # Y‚ÇÇ] + d[Y‚ÇÉ # Y‚ÇÑ]) + (d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ]) := by
    have K : Y‚ÇÅ + Y‚ÇÉ + Y‚ÇÇ + Y‚ÇÑ = S := by simp only [S]; abel
    have K' : I[Y‚ÇÅ + Y‚ÇÉ : Y‚ÇÅ + Y‚ÇÇ|Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ] = I[Y‚ÇÅ + Y‚ÇÉ : Y‚ÇÉ + Y‚ÇÑ|Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ] := by
      have : Measurable (Y‚ÇÅ + Y‚ÇÉ) := by fun_prop
      rw [condMutualInfo_comm this (by fun_prop), condMutualInfo_comm this (by fun_prop)]
      have B := condMutualInfo_of_inj_map (X := Y‚ÇÉ + Y‚ÇÑ) (Y := Y‚ÇÅ + Y‚ÇÉ) (Z := Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ)
        (by fun_prop) (by fun_prop) (by fun_prop) (fun a b ‚Ü¶ a - b) (fun a ‚Ü¶ sub_right_injective)
        (Œº := ‚Ñô)
      convert B with g
      simp
    have K'' : I[Y‚ÇÅ + Y‚ÇÇ : Y‚ÇÅ + Y‚ÇÉ|Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ] = I[Y‚ÇÅ + Y‚ÇÇ : Y‚ÇÇ + Y‚ÇÑ|Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ] := by
      have : Measurable (Y‚ÇÅ + Y‚ÇÇ) := by fun_prop
      rw [condMutualInfo_comm this (by fun_prop), condMutualInfo_comm this (by fun_prop)]
      have B := condMutualInfo_of_inj_map (X := Y‚ÇÇ + Y‚ÇÑ) (Y := Y‚ÇÅ + Y‚ÇÇ) (Z := Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ)
        (by fun_prop) (by fun_prop) (by fun_prop) (fun a b ‚Ü¶ a - b) (fun a ‚Ü¶ sub_right_injective)
        (Œº := ‚Ñô)
      convert B with g
      simp
      abel
    rw [sum_of_rdist_eq_char_2' Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ h_indep hY‚ÇÅ hY‚ÇÇ hY‚ÇÉ hY‚ÇÑ,
      sum_of_rdist_eq_char_2' Y‚ÇÅ Y‚ÇÉ Y‚ÇÇ Y‚ÇÑ h_indep.reindex_four_acbd hY‚ÇÅ hY‚ÇÉ hY‚ÇÇ hY‚ÇÑ, K, K', K'']
    abel
  linarith

/-- For independent random variables $Y_1,Y_2,Y_3,Y_4$ over $G$, define
$T_1:=Y_1+Y_2, T_2:=Y_1+Y_3, T_3:=Y_2+Y_3$ and $S:=Y_1+Y_2+Y_3+Y_4$. Then
  $$\sum_{1 \leq i < j \leq 3} (\rho(T_i|T_j,S) + \rho(T_j|T_i,S)
    - \frac{1}{2}\sum_{i} \rho(Y_i))\le \sum_{1\leq i < j \leq 4}d[Y_i;Y_j]$$ -/
lemma condRho_sum_le' {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : Œ© ‚Üí G}
      (hY‚ÇÅ : Measurable Y‚ÇÅ) (hY‚ÇÇ : Measurable Y‚ÇÇ) (hY‚ÇÉ : Measurable Y‚ÇÉ) (hY‚ÇÑ : Measurable Y‚ÇÑ)
      (h_indep : iIndepFun (fun _ ‚Ü¶ hGm) ![Y‚ÇÅ, Y‚ÇÇ, Y‚ÇÉ, Y‚ÇÑ]) (hA : A.Nonempty) :
    let S := Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ
    let T‚ÇÅ := Y‚ÇÅ + Y‚ÇÇ
    let T‚ÇÇ := Y‚ÇÅ + Y‚ÇÉ
    let T‚ÇÉ := Y‚ÇÇ + Y‚ÇÉ
    œÅ[T‚ÇÅ | ‚ü®T‚ÇÇ, S‚ü© # A] + œÅ[T‚ÇÇ | ‚ü®T‚ÇÅ, S‚ü© # A] + œÅ[T‚ÇÅ | ‚ü®T‚ÇÉ, S‚ü© # A] + œÅ[T‚ÇÉ | ‚ü®T‚ÇÅ, S‚ü© # A]
      + œÅ[T‚ÇÇ | ‚ü®T‚ÇÉ, S‚ü© # A] + œÅ[T‚ÇÉ | ‚ü®T‚ÇÇ, S‚ü© # A]
      - 3 * (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + œÅ[Y‚ÇÉ # A] + œÅ[Y‚ÇÑ # A]) / 2 ‚â§
    d[Y‚ÇÅ # Y‚ÇÇ] + d[Y‚ÇÅ # Y‚ÇÉ] + d[Y‚ÇÅ # Y‚ÇÑ] + d[Y‚ÇÇ # Y‚ÇÉ] + d[Y‚ÇÇ # Y‚ÇÑ] + d[Y‚ÇÉ # Y‚ÇÑ] := by
  have K‚ÇÅ := condRho_sum_le hY‚ÇÅ hY‚ÇÇ hY‚ÇÉ hY‚ÇÑ h_indep hA
  have K‚ÇÇ := condRho_sum_le hY‚ÇÇ hY‚ÇÅ hY‚ÇÉ hY‚ÇÑ h_indep.reindex_four_bacd hA
  have Y‚ÇÇ‚ÇÅ : Y‚ÇÇ + Y‚ÇÅ = Y‚ÇÅ + Y‚ÇÇ := by abel
  have dY‚ÇÇ‚ÇÅ : d[Y‚ÇÇ # Y‚ÇÅ] = d[Y‚ÇÅ # Y‚ÇÇ] := rdist_symm
  rw [Y‚ÇÇ‚ÇÅ, dY‚ÇÇ‚ÇÅ] at K‚ÇÇ
  have K‚ÇÉ := condRho_sum_le hY‚ÇÉ hY‚ÇÅ hY‚ÇÇ hY‚ÇÑ h_indep.reindex_four_cabd hA
  have Y‚ÇÉ‚ÇÅ : Y‚ÇÉ + Y‚ÇÅ = Y‚ÇÅ + Y‚ÇÉ := by abel
  have Y‚ÇÉ‚ÇÇ : Y‚ÇÉ + Y‚ÇÇ = Y‚ÇÇ + Y‚ÇÉ := by abel
  have S‚ÇÉ : Y‚ÇÅ + Y‚ÇÉ + Y‚ÇÇ + Y‚ÇÑ = Y‚ÇÅ + Y‚ÇÇ + Y‚ÇÉ + Y‚ÇÑ := by abel
  have dY‚ÇÉ‚ÇÅ : d[Y‚ÇÉ # Y‚ÇÅ] = d[Y‚ÇÅ # Y‚ÇÉ] := rdist_symm
  have dY‚ÇÉ‚ÇÇ : d[Y‚ÇÉ # Y‚ÇÇ] = d[Y‚ÇÇ # Y‚ÇÉ] := rdist_symm
  rw [Y‚ÇÉ‚ÇÅ, Y‚ÇÉ‚ÇÇ, S‚ÇÉ, dY‚ÇÉ‚ÇÅ, dY‚ÇÉ‚ÇÇ] at K‚ÇÉ
  linarith

include hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h‚ÇÇ h_indep h_min hŒ∑ in
/-- If $X_1, X_2$ is a $\phi$-minimizer, then $d[X_1;X_2] = 0$. -/
lemma dist_of_min_eq_zero' (hA : A.Nonempty) (hŒ∑' : Œ∑ < 1/8) : d[X‚ÇÅ # X‚ÇÇ] = 0 := by
  let T‚ÇÅ := X‚ÇÅ + X‚ÇÇ
  let T‚ÇÇ := X‚ÇÅ + X‚ÇÅ'
  let T‚ÇÉ := X‚ÇÅ' + X‚ÇÇ
  have hsum : T‚ÇÅ + T‚ÇÇ + T‚ÇÉ = 0 := by
    have : T‚ÇÅ + T‚ÇÇ + T‚ÇÉ = 2 ‚Ä¢ (X‚ÇÅ + X‚ÇÅ' + X‚ÇÇ) := by simp only [T‚ÇÅ, T‚ÇÇ, T‚ÇÉ]; abel
    rwa [ZModModule.char_nsmul_eq_zero 2 (X‚ÇÅ + X‚ÇÅ' + X‚ÇÇ)] at this
  let S := X‚ÇÅ + X‚ÇÇ + X‚ÇÅ' + X‚ÇÇ'
  have J‚ÇÅ : k ‚â§ I‚ÇÅ + 2 * I‚ÇÇ + Œ∑ / 3 *
      (œÅ[T‚ÇÅ | ‚ü®T‚ÇÇ, S‚ü© # A] + œÅ[T‚ÇÇ | ‚ü®T‚ÇÅ, S‚ü© # A] + œÅ[T‚ÇÅ | ‚ü®T‚ÇÉ, S‚ü© # A] + œÅ[T‚ÇÉ | ‚ü®T‚ÇÅ, S‚ü© # A]
        + œÅ[T‚ÇÇ | ‚ü®T‚ÇÉ, S‚ü© # A] + œÅ[T‚ÇÉ | ‚ü®T‚ÇÇ, S‚ü© # A] - 3 * (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÇ # A])) := by
    have K := dist_le_of_sum_zero_cond' h_min S hsum
      (by fun_prop) (by fun_prop) (by fun_prop) (by fun_prop)
    have : I[T‚ÇÇ : T‚ÇÉ | S] = I‚ÇÇ := by
      rw [condMutualInfo_comm (by fun_prop) (by fun_prop)]
      have : X‚ÇÅ + X‚ÇÅ' = X‚ÇÅ' + X‚ÇÅ := by abel
      convert I‚ÇÉ_eq _ _ _ _ hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h‚ÇÅ h_indep using 2
    linarith
  have J‚ÇÇ : k ‚â§ I‚ÇÅ + 2 * I‚ÇÇ +
      Œ∑ / 3 * (k + d[X‚ÇÅ # X‚ÇÅ'] + d[X‚ÇÅ # X‚ÇÇ'] + d[X‚ÇÇ # X‚ÇÅ'] + d[X‚ÇÇ # X‚ÇÇ'] + d[X‚ÇÅ' # X‚ÇÇ']) := by
    apply J‚ÇÅ.trans
    gcongr
    have W : X‚ÇÇ + X‚ÇÅ' = X‚ÇÅ' + X‚ÇÇ := by abel
    have := condRho_sum_le' hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' h_indep hA
    simp only [W] at this
    have : œÅ[X‚ÇÅ' # A] = œÅ[X‚ÇÅ # A] := rho_eq_of_identDistrib h‚ÇÅ.symm
    have : œÅ[X‚ÇÇ' # A] = œÅ[X‚ÇÇ # A] := rho_eq_of_identDistrib h‚ÇÇ.symm
    linarith
  have J‚ÇÉ : k ‚â§ I‚ÇÅ + 2 * I‚ÇÇ + Œ∑ / 3 * (6 * k + I‚ÇÇ - I‚ÇÅ) := by
    apply J‚ÇÇ.trans_eq
    congr 2
    have : d[X‚ÇÅ # X‚ÇÅ'] = d[X‚ÇÅ # X‚ÇÅ] :=
      IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÅ.aemeasurable) h‚ÇÅ.symm
    have : d[X‚ÇÅ # X‚ÇÇ'] = d[X‚ÇÅ # X‚ÇÇ] :=
      IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÅ.aemeasurable) h‚ÇÇ.symm
    have : d[X‚ÇÇ # X‚ÇÅ'] = d[X‚ÇÅ # X‚ÇÇ] := by
      rw [rdist_symm]
      exact IdentDistrib.rdist_eq h‚ÇÅ.symm (IdentDistrib.refl hX‚ÇÇ.aemeasurable)
    have : d[X‚ÇÇ # X‚ÇÇ'] = d[X‚ÇÇ # X‚ÇÇ] :=
      IdentDistrib.rdist_eq (IdentDistrib.refl hX‚ÇÇ.aemeasurable) h‚ÇÇ.symm
    have : d[X‚ÇÅ' # X‚ÇÇ'] = d[X‚ÇÅ # X‚ÇÇ] := IdentDistrib.rdist_eq h‚ÇÅ.symm h‚ÇÇ.symm
    have := rdist_add_rdist_eq h‚ÇÅ h‚ÇÇ h_indep hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ'
    linarith
  let D := 2 * Œ∑ * k - I‚ÇÅ
  have J‚ÇÑ : k ‚â§ 8 * Œ∑ * k - (3 - 10 * Œ∑) / (3 * (1 - Œ∑)) * D := by
    have I‚ÇÅ_eq : I‚ÇÅ = 2 * Œ∑ * k - D := by simp only [D]; abel
    have : I‚ÇÇ ‚â§ 2 * Œ∑ * k + Œ∑ / (1 - Œ∑) * D :=
      I_two_le hŒ∑ h_min h‚ÇÅ h‚ÇÇ h_indep hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' hA (by linarith)
    calc
    k ‚â§ I‚ÇÅ + 2 * I‚ÇÇ + Œ∑ / 3 * (6 * k + I‚ÇÇ - I‚ÇÅ) := J‚ÇÉ
    _ = 2 * Œ∑ * k + I‚ÇÅ + 2 * I‚ÇÇ + Œ∑ / 3 * (I‚ÇÇ - I‚ÇÅ) := by ring
    _ ‚â§ 2 * Œ∑ * k + (2 * Œ∑ * k - D) + 2 * (2 * Œ∑ * k + Œ∑ / (1 - Œ∑) * D)
        + Œ∑ / 3 * ((2 * Œ∑ * k + Œ∑ / (1 - Œ∑) * D) - (2 * Œ∑ * k - D)) := by
      rw [I‚ÇÅ_eq]
      gcongr
    _ = 8 * Œ∑ * k - (3 - 10 * Œ∑) / (3 * (1 - Œ∑)) * D := by
      have : 1 - Œ∑ ‚â† 0 := ne_of_gt (by linarith)
      field_simp
      ring
  have J‚ÇÖ : k ‚â§ 8 * Œ∑ * k - 0 := by
    apply J‚ÇÑ.trans
    gcongr
    have : 0 ‚â§ D := sub_nonneg_of_le (I_one_le hŒ∑ h_min h‚ÇÅ h‚ÇÇ h_indep hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ' hX‚ÇÇ' hA)
    apply mul_nonneg _ this
    exact div_nonneg (by linarith) (by linarith)
  have : k ‚â§ 0 := by nlinarith
  exact le_antisymm this (rdist_nonneg hX‚ÇÅ hX‚ÇÇ)

include hX‚ÇÅ hX‚ÇÇ h_min hŒ∑ in
theorem dist_of_min_eq_zero (hA : A.Nonempty) (hŒ∑' : Œ∑ < 1/8) : d[X‚ÇÅ # X‚ÇÇ] = 0 := by
  let ‚ü®Œ©', m', Œº, Y‚ÇÅ, Y‚ÇÇ, Y‚ÇÅ', Y‚ÇÇ', hŒº, h_indep, hY‚ÇÅ, hY‚ÇÇ, hY‚ÇÅ', hY‚ÇÇ', h_id1, h_id2, h_id1', h_id2'‚ü©
    := independent_copies4_nondep hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ hX‚ÇÇ ‚Ñô ‚Ñô ‚Ñô ‚Ñô
  rw [‚Üê h_id1.rdist_eq h_id2]
  letI : MeasureSpace Œ©' := ‚ü®Œº‚ü©
  have : IsProbabilityMeasure (‚Ñô : Measure Œ©') := hŒº
  have h'_min : phiMinimizes Y‚ÇÅ Y‚ÇÇ Œ∑ A ‚Ñô := phiMinimizes_of_identDistrib h_min h_id1.symm h_id2.symm
  exact dist_of_min_eq_zero' hŒ∑ h'_min (h_id1.trans h_id1'.symm) (h_id2.trans h_id2'.symm)
     h_indep hY‚ÇÅ hY‚ÇÇ hY‚ÇÅ' hY‚ÇÇ'  hA hŒ∑'

open Filter
open scoped Topology

/-- For `Œ∑ ‚â§ 1/8`, there exist phi-minimizers `X‚ÇÅ, X‚ÇÇ` at zero Rusza distance. For `Œ∑ < 1/8`,
all minimizers are fine, by `dist_of_min_eq_zero`. For `Œ∑ = 1/8`, we use a limit of
minimizers for `Œ∑ < 1/8`, which exists by compactness. -/
lemma phiMinimizer_exists_rdist_eq_zero (hA : A.Nonempty) :
    ‚àÉ (Œ© : Type uG) (_ : MeasureSpace Œ©) (X‚ÇÅ : Œ© ‚Üí G) (X‚ÇÇ : Œ© ‚Üí G),
      Measurable X‚ÇÅ ‚àß Measurable X‚ÇÇ ‚àß IsProbabilityMeasure (‚Ñô : Measure Œ©)
      ‚àß phiMinimizes X‚ÇÅ X‚ÇÇ (1/8 : ‚Ñù) A ‚Ñô ‚àß d[X‚ÇÅ # X‚ÇÇ] = 0 := by
    -- let `u‚Çô` be a sequence converging from below to `Œ∑`. In particular, `u‚Çô < 1/8`.
  obtain ‚ü®u, -, u_mem, u_lim‚ü© :
      ‚àÉ u, StrictMono u ‚àß (‚àÄ (n : ‚Ñï), u n ‚àà Set.Ioo 0 (1/8 : ‚Ñù)) ‚àß Tendsto u atTop (ùìù (1/8)) :=
    exists_seq_strictMono_tendsto' (by norm_num)
  -- For each `n`, consider a minimizer associated to `Œ∑ = u‚Çô`.
  have : ‚àÄ n, ‚àÉ (Œº : Measure (G √ó G)), IsProbabilityMeasure Œº ‚àß
      phiMinimizes Prod.fst Prod.snd (u n) A Œº := fun n ‚Ü¶ phi_min_exists hA
  choose Œº Œº_prob hŒº using this
  -- extract a converging subsequence of the sequence of minimizers, seen as pairs of probability
  -- measures on `G` (which is a compact space).
  let Œº' : ‚Ñï ‚Üí ProbabilityMeasure (G √ó G) := fun n ‚Ü¶ ‚ü®Œº n, Œº_prob n‚ü©
  let _i : TopologicalSpace G := (‚ä• : TopologicalSpace G)
  have : DiscreteTopology G := ‚ü®rfl‚ü©
  -- The limiting pair of measures will be the desired minimizer.
  rcases IsCompact.tendsto_subseq (x := Œº') isCompact_univ (fun n ‚Ü¶ mem_univ _)
    with ‚ü®ŒΩ, -, œÜ, œÜmono, hŒΩ‚ü©
  have œÜlim : Tendsto œÜ atTop atTop := œÜmono.tendsto_atTop
  let M : MeasureSpace (G √ó G) := ‚ü®ŒΩ‚ü©
  have : IsProbabilityMeasure (‚Ñô : Measure (G √ó G)) := by
    change IsProbabilityMeasure ŒΩ
    infer_instance
  refine ‚ü®G √ó G, M, Prod.fst, Prod.snd, measurable_fst, measurable_snd, by infer_instance, ?_, ?_‚ü©
  -- check that it is indeed a minimizer, as a limit of minimizers.
  ¬∑ intro Œ©' mŒ©' X' Y' hP hX' hY'
    have I n : phi Prod.fst Prod.snd (u n) A (Œº n) ‚â§ phi X' Y' (u n) A ‚Ñô :=
      hŒº n _ _ _ _ hP hX' hY'
    have L1 : Tendsto (fun n ‚Ü¶ phi Prod.fst Prod.snd (u (œÜ n)) A (Œº (œÜ n))) atTop
        (ùìù (phi Prod.fst Prod.snd (1/8) A ŒΩ)) := by
      apply Tendsto.add
      ¬∑ apply tendsto_rdist_probabilityMeasure continuous_fst continuous_snd hŒΩ
      apply Tendsto.mul (u_lim.comp œÜlim)
      apply Tendsto.add
      ¬∑ apply tendsto_rho_probabilityMeasure continuous_fst hA hŒΩ
      ¬∑ apply tendsto_rho_probabilityMeasure continuous_snd hA hŒΩ
    have L2 : Tendsto (fun n ‚Ü¶ phi X' Y' (u (œÜ n)) A ‚Ñô) atTop (ùìù (phi X' Y' (1/8) A ‚Ñô)) :=
      Tendsto.const_add _ (Tendsto.mul_const _ (u_lim.comp œÜlim))
    exact le_of_tendsto_of_tendsto' L1 L2 (fun n ‚Ü¶ I _)
  -- check that it has zero Rusza distance, as a limit of a sequence at zero Rusza distance.
  ¬∑ -- The minimizer associated to `u‚Çô` is at zero Rusza distance of itself, by
    -- lemma `tau_strictly_decreases'`.
    have I0 n : d[Prod.fst ; Œº n # Prod.snd ; Œº n] = 0 := by
      let M : MeasureSpace (G √ó G) := ‚ü®Œº n‚ü©
      apply dist_of_min_eq_zero (u_mem n).1 (hŒº n) measurable_fst measurable_snd hA (u_mem n).2
    have : Tendsto (fun x ‚Ü¶ d[Prod.fst ; Œº (œÜ x) # Prod.snd ; Œº (œÜ x)]) atTop
        (ùìù d[@Prod.fst G G # @Prod.snd G G]) := by
      apply tendsto_rdist_probabilityMeasure continuous_fst continuous_snd hŒΩ
    simp_rw [I0, tendsto_const_nhds_iff] at this
    exact this.symm

end phiMinimizer

section PFR

variable {G : Type uG} [AddCommGroup G] [Fintype G]  [Module (ZMod 2) G]
{Œ© : Type uG} [MeasureSpace Œ©] [IsProbabilityMeasure (‚Ñô : Measure Œ©)] {A : Finset G}

/-- For any random variables $Y_1,Y_2$, there exist a subgroup $H$ such that
  $$ 2\rho(U_H) \leq \rho(Y_1) + \rho(Y_2) + 8 d[Y_1;Y_2].$$ -/
theorem rho_PFR_conjecture [MeasurableSpace G] [DiscreteMeasurableSpace G]
    (Y‚ÇÅ Y‚ÇÇ : Œ© ‚Üí G) (hY‚ÇÅ : Measurable Y‚ÇÅ) (hY‚ÇÇ : Measurable Y‚ÇÇ) (A : Finset G) (hA : A.Nonempty) :
    ‚àÉ (H : Submodule (ZMod 2) G) (Œ©' : Type uG) (mŒ©' : MeasureSpace Œ©') (U : Œ©' ‚Üí G),
    IsProbabilityMeasure (‚Ñô : Measure Œ©') ‚àß Measurable U ‚àß
    IsUniform H U ‚àß 2 * œÅ[U # A] ‚â§ œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A] + 8 * d[Y‚ÇÅ # Y‚ÇÇ] := by
  obtain ‚ü®Œ©', mŒ©', X‚ÇÅ, X‚ÇÇ, hX‚ÇÅ, hX‚ÇÇ, hP, htau_min, hdist‚ü© := phiMinimizer_exists_rdist_eq_zero hA
  wlog h : œÅ[X‚ÇÅ # A] ‚â§ œÅ[X‚ÇÇ # A] generalizing X‚ÇÅ X‚ÇÇ
  ¬∑ rw [rdist_symm] at hdist
    exact this X‚ÇÇ X‚ÇÅ hX‚ÇÇ hX‚ÇÅ (phiMinimizes_comm htau_min) hdist (by linarith)
  -- use for `U` a translate of `X` to make sure that `0` is in its support.
  obtain ‚ü®x‚ÇÄ, h‚ÇÄ‚ü© : ‚àÉ x‚ÇÄ, ‚Ñô (X‚ÇÅ‚Åª¬π' {x‚ÇÄ}) ‚â† 0 := by
    by_contra! h
    have A a : (‚Ñô : Measure Œ©').map X‚ÇÅ {a} = 0 := by
      rw [Measure.map_apply hX‚ÇÅ $ .of_discrete]
      exact h _
    have B : (‚Ñô : Measure Œ©').map X‚ÇÅ = 0 := by
      rw [‚Üê Measure.sum_smul_dirac (Œº := (‚Ñô : Measure Œ©').map X‚ÇÅ)]
      simp [A]
    have : IsProbabilityMeasure ((‚Ñô : Measure Œ©').map X‚ÇÅ) :=
      isProbabilityMeasure_map hX‚ÇÅ.aemeasurable
    exact IsProbabilityMeasure.ne_zero _ B
  have h_unif : IsUniform (symmGroup X‚ÇÅ hX‚ÇÅ) (fun œâ ‚Ü¶ X‚ÇÅ œâ - x‚ÇÄ) := by
    have h' : d[X‚ÇÅ # X‚ÇÅ] = 0 := by
      apply le_antisymm _ (rdist_nonneg hX‚ÇÅ hX‚ÇÅ)
      calc
        d[X‚ÇÅ # X‚ÇÅ] ‚â§ d[X‚ÇÅ # X‚ÇÇ] + d[X‚ÇÇ # X‚ÇÅ] := rdist_triangle hX‚ÇÅ hX‚ÇÇ hX‚ÇÅ
        _ = 0 := by rw [hdist, rdist_symm, hdist, zero_add]
    exact isUniform_sub_const_of_rdist_eq_zero hX‚ÇÅ h' h‚ÇÄ
  refine ‚ü®AddSubgroup.toZModSubmodule 2 (symmGroup X‚ÇÅ hX‚ÇÅ), Œ©', by infer_instance,
    fun œâ ‚Ü¶ X‚ÇÅ œâ - x‚ÇÄ, by infer_instance, by fun_prop, by exact h_unif, ?_‚ü©
  have J : d[X‚ÇÅ # X‚ÇÇ] + (1/8) * (œÅ[X‚ÇÅ # A] + œÅ[X‚ÇÇ # A])
      ‚â§ d[Y‚ÇÅ # Y‚ÇÇ] + (1/8) * (œÅ[Y‚ÇÅ # A] + œÅ[Y‚ÇÇ # A]) := by
    have Z := le_rdist_of_phiMinimizes htau_min hY‚ÇÅ hY‚ÇÇ (Œº‚ÇÅ := ‚Ñô) (Œº‚ÇÇ := ‚Ñô)
    linarith
  rw [hdist, zero_add] at J
  have : œÅ[fun œâ ‚Ü¶ X‚ÇÅ œâ - x‚ÇÄ # A] = œÅ[X‚ÇÅ # A] := by
    simp_rw [sub_eq_add_neg, rho_of_translate hX‚ÇÅ hA]
  linarith

/-- If $|A+A| \leq K|A|$, then there exists a subgroup $H$ and $t\in G$ such that
$|A \cap (H+t)| \geq K^{-4} \sqrt{|A||V|}$, and $|H|/|A|\in[K^{-8},K^8]$. -/
lemma better_PFR_conjecture_aux0 {A : Set G} (h‚ÇÄA : A.Nonempty) {K : ‚Ñù}
    (hA : Nat.card (A + A) ‚â§ K * Nat.card A) :
    ‚àÉ (H : Submodule (ZMod 2) G) (t : G),
    K ^ (-4) * (Nat.card A * Nat.card H) ^ (1/2) ‚â§ Nat.card (A ‚à© (H + {t}) : Set G)
      ‚àß Nat.card A ‚â§ K ^ 8 * Nat.card H ‚àß Nat.card H ‚â§ K ^ 8 * Nat.card A := by
  have A_fin : Finite A := by infer_instance
  classical
  let mG : MeasurableSpace G := ‚ä§
  have : MeasurableSingletonClass G := ‚ü®Œª _ ‚Ü¶ trivial‚ü©
  obtain ‚ü®A_pos, -, K_pos‚ü© : (0 : ‚Ñù) < Nat.card A ‚àß (0 : ‚Ñù) < Nat.card (A + A) ‚àß 0 < K :=
    PFR_conjecture_pos_aux' h‚ÇÄA hA
  let A' := A.toFinite.toFinset
  have h‚ÇÄA' : Finset.Nonempty A' := by
    simp [A', Finset.Nonempty]
    exact h‚ÇÄA
  have hAA' : A' = A := Finite.coe_toFinset (toFinite A)
  rcases exists_isUniform_measureSpace A' h‚ÇÄA' with ‚ü®Œ©‚ÇÄ, mŒ©‚ÇÄ, UA, hP‚ÇÄ, UAmeas, UAunif, -‚ü©
  rw [hAA'] at UAunif
  have hadd_sub : A + A = A - A := by ext; simp [Set.mem_add, Set.mem_sub, ZModModule.sub_eq_add]
  rw [hadd_sub] at hA
  have : d[UA # UA] ‚â§ log K := rdist_le_of_isUniform_of_card_add_le h‚ÇÄA hA UAunif UAmeas
  rw [‚Üê hadd_sub] at hA
  -- entropic PFR gives a subgroup `H` which is close to `A` for the rho functional
  rcases rho_PFR_conjecture UA UA UAmeas UAmeas A' h‚ÇÄA'
    with ‚ü®H, Œ©‚ÇÅ, mŒ©‚ÇÅ, UH, hP‚ÇÅ, UHmeas, UHunif, hUH‚ü©
  have ineq : œÅ[UH # A'] ‚â§ 4 * log K := by
    rw [‚Üê hAA'] at UAunif
    have : œÅ[UA # A'] = 0 := rho_of_uniform UAunif UAmeas h‚ÇÄA'
    linarith
  set r := 4 * log K with hr
  have J : K ^ (-4) = exp (-r) := by
    rw [hr, ‚Üê neg_mul, mul_comm, exp_mul, exp_log K_pos]
  have J' : K ^ 8 = exp (2 * r) := by
    have : 2 * r = 8 * log K := by ring
    rw [this, mul_comm, exp_mul, exp_log K_pos]
  rw [J, J']
  refine ‚ü®H, ?_‚ü©
  have Z := rho_of_submodule UHunif h‚ÇÄA' UHmeas r ineq
  have : Nat.card A = Nat.card A' := by simp [‚Üê hAA']
  have I t : t +·µ• (H : Set G) = (H : Set G) + {t} := by
    ext z; simp [mem_vadd_set_iff_neg_vadd_mem, add_comm]
  simp_rw [‚Üê I]
  convert Z
  exact hAA'.symm

/-- Auxiliary statement towards the polynomial Freiman-Ruzsa (PFR) conjecture: if $A$ is a subset of
an elementary abelian 2-group of doubling constant at most $K$, then there exists a subgroup $H$
such that $A$ can be covered by at most $K^5 |A|^{1/2} / |H|^{1/2}$ cosets of $H$, and $H$ has
the same cardinality as $A$ up to a multiplicative factor $K^8$. -/
lemma better_PFR_conjecture_aux {A : Set G} (h‚ÇÄA : A.Nonempty) {K : ‚Ñù}
    (hA : Nat.card (A + A) ‚â§ K * Nat.card A) :
    ‚àÉ (H : Submodule (ZMod 2) G) (c : Set G),
    Nat.card c ‚â§ K ^ 5 * Nat.card A ^ (1/2) * (Nat.card H : ‚Ñù) ^ (-1/2)
      ‚àß Nat.card H ‚â§ K ^ 8 * Nat.card A ‚àß Nat.card A ‚â§ K ^ 8 * Nat.card H ‚àß A ‚äÜ c + H := by
  obtain ‚ü®A_pos, -, K_pos‚ü© : (0 : ‚Ñù) < Nat.card A ‚àß (0 : ‚Ñù) < Nat.card (A + A) ‚àß 0 < K :=
    PFR_conjecture_pos_aux' h‚ÇÄA hA
  rcases better_PFR_conjecture_aux0 h‚ÇÄA hA with ‚ü®H, x‚ÇÄ, J, IAH, IHA‚ü©
  have H_pos : (0 : ‚Ñù) < Nat.card H := by
    have : 0 < Nat.card H := Nat.card_pos
    positivity
  have Hne : Set.Nonempty (A ‚à© (H + {x‚ÇÄ})) := by
    by_contra h'
    have : 0 < Nat.card H := Nat.card_pos
    have : (0 : ‚Ñù) < Nat.card (A ‚à© (H + {x‚ÇÄ}) : Set G) := lt_of_lt_of_le (by positivity) J
    simp only [Nat.card_eq_fintype_card, Nat.card_of_isEmpty, CharP.cast_eq_zero, lt_self_iff_false,
      not_nonempty_iff_eq_empty.1 h', Fintype.card_ofIsEmpty] at this
    /- use Rusza covering lemma to cover `A` by few translates of `A ‚à© (H + {x‚ÇÄ}) - A ‚à© (H + {x‚ÇÄ})`
  (which is contained in `H`). The number of translates is at most
  `#(A + (A ‚à© (H + {x‚ÇÄ}))) / #(A ‚à© (H + {x‚ÇÄ}))`, where the numerator is controlled as this is
  a subset of `A + A`, and the denominator is bounded below by the previous inequality`. -/
  rcases Set.exists_subset_add_sub (toFinite A) (toFinite (A ‚à© ((H + {x‚ÇÄ} : Set G)))) Hne with
    ‚ü®u, hu, Au, -‚ü©
  have Iu : Nat.card u ‚â§ K ^ 5 * Nat.card A ^ (1/2) * Nat.card H ^ (-1/2) := by
    have : (0 : ‚Ñù) ‚â§ Nat.card u := by simp
    have Z1 := mul_le_mul_of_nonneg_left J this
    have Z2 : (Nat.card u * Nat.card (A ‚à© (H + {x‚ÇÄ}) : Set G) : ‚Ñù)
      ‚â§ Nat.card (A + A ‚à© (‚ÜëH + {x‚ÇÄ})) := by norm_cast
    have Z3 : (Nat.card (A + A ‚à© (‚ÜëH + {x‚ÇÄ})) : ‚Ñù) ‚â§ K * Nat.card A := by
      apply le_trans _ hA
      simp only [Nat.cast_le]
      apply Nat.card_mono (toFinite _)
      apply add_subset_add_left inter_subset_left
    have : 0 ‚â§ K ^ (4) * Nat.card A ^ (-1/2) * Nat.card H ^ (-1/2) := by positivity
    have T := mul_le_mul_of_nonneg_left ((Z1.trans Z2).trans Z3) this
    convert T using 1 <;> rpow_ring <;> norm_num
  have A_subset_uH : A ‚äÜ u + H := by
    apply Au.trans
    rw [add_sub_assoc]
    apply add_subset_add_left
    apply (sub_subset_sub inter_subset_right inter_subset_right).trans
    rintro - ‚ü®-, ‚ü®y, hy, xy, hxy, rfl‚ü©, -, ‚ü®z, hz, xz, hxz, rfl‚ü©, rfl‚ü©
    simp only [mem_singleton_iff] at hxy hxz
    simpa [hxy, hxz] using H.sub_mem hy hz
  exact ‚ü®H, u, Iu, IHA, IAH, A_subset_uH‚ü©

/-- If $A \subset {\bf F}_2^n$ is finite non-empty with $|A+A| \leq K|A|$, then there exists a
subgroup $H$ of ${\bf F}_2^n$ with $|H| \leq |A|$ such that $A$ can be covered by at most $2K^9$
translates of $H$. -/
lemma better_PFR_conjecture {A : Set G} (h‚ÇÄA : A.Nonempty) {K : ‚Ñù}
    (hA : Nat.card (A + A) ‚â§ K * Nat.card A) :
    ‚àÉ (H : Submodule (ZMod 2) G) (c : Set G),
      Nat.card c < 2 * K ^ 9 ‚àß Nat.card H ‚â§ Nat.card A ‚àß A ‚äÜ c + H := by
  obtain ‚ü®A_pos, -, K_pos‚ü© : (0 : ‚Ñù) < Nat.card A ‚àß (0 : ‚Ñù) < Nat.card (A + A) ‚àß 0 < K :=
    PFR_conjecture_pos_aux' h‚ÇÄA hA
  -- consider the subgroup `H` given by Lemma `PFR_conjecture_aux`.
  obtain ‚ü®H, c, hc, IHA, IAH, A_subs_cH‚ü© : ‚àÉ (H : Submodule (ZMod 2) G) (c : Set G),
    Nat.card c ‚â§ K ^ 5 * Nat.card A ^ (1/2) * Nat.card H ^ (-1/2)
      ‚àß Nat.card H ‚â§ K ^ 8 * Nat.card A ‚àß Nat.card A ‚â§ K ^ 8 * Nat.card H
      ‚àß A ‚äÜ c + H :=
    better_PFR_conjecture_aux h‚ÇÄA hA
  have H_pos : (0 : ‚Ñù) < Nat.card H := by
    have : 0 < Nat.card H := Nat.card_pos; positivity
  rcases le_or_lt (Nat.card H) (Nat.card A) with h|h
  -- If `#H ‚â§ #A`, then `H` satisfies the conclusion of the theorem
  ¬∑ refine ‚ü®H, c, ?_, h, A_subs_cH‚ü©
    calc
    Nat.card c ‚â§ K ^ 5 * Nat.card A ^ (1/2) * Nat.card H ^ (-1/2) := hc
    _ ‚â§ K ^ 5 * (K ^ 8 * Nat.card H) ^ (1/2) * Nat.card H ^ (-1/2) := by
      gcongr
    _ = K ^ 9 := by rpow_ring; norm_num
    _ < 2 * K ^ 9 := by linarith [show 0 < K ^ 9 by positivity]
  -- otherwise, we decompose `H` into cosets of one of its subgroups `H'`, chosen so that
  -- `#A / 2 < #H' ‚â§ #A`. This `H'` satisfies the desired conclusion.
  ¬∑ obtain ‚ü®H', IH'A, IAH', H'H‚ü© : ‚àÉ H' : Submodule (ZMod 2) G, Nat.card H' ‚â§ Nat.card A
          ‚àß Nat.card A < 2 * Nat.card H' ‚àß H' ‚â§ H := by
      have A_pos' : 0 < Nat.card A := mod_cast A_pos
      exact ZModModule.exists_submodule_subset_card_le Nat.prime_two H h.le A_pos'.ne'
    have : (Nat.card A / 2 : ‚Ñù) < Nat.card H' := by
      rw [div_lt_iff‚ÇÄ zero_lt_two, mul_comm]; norm_cast
    have H'_pos : (0 : ‚Ñù) < Nat.card H' := by
      have : 0 < Nat.card H' := Nat.card_pos; positivity
    obtain ‚ü®u, HH'u, hu‚ü© :=
      H'.toAddSubgroup.exists_left_transversal_of_le (H := H.toAddSubgroup) H'H
    dsimp at HH'u
    refine ‚ü®H', c + u, ?_, IH'A, by rwa [add_assoc, HH'u]‚ü©
    calc
    (Nat.card (c + u) : ‚Ñù)
      ‚â§ Nat.card c * Nat.card u := mod_cast natCard_add_le
    _ ‚â§ (K ^ 5 * Nat.card A ^ (1 / 2) * (Nat.card H ^ (-1 / 2)))
          * (Nat.card H / Nat.card H') := by
        gcongr
        apply le_of_eq
        rw [eq_div_iff H'_pos.ne']
        norm_cast
    _ < (K ^ 5 * Nat.card A ^ (1 / 2) * (Nat.card H ^ (-1 / 2)))
          * (Nat.card H / (Nat.card A / 2)) := by
        gcongr
    _ = 2 * K ^ 5 * Nat.card A ^ (-1/2) * Nat.card H ^ (1/2) := by
        field_simp
        rpow_ring
        norm_num
    _ ‚â§ 2 * K ^ 5 * Nat.card A ^ (-1/2) * (K ^ 8 * Nat.card A) ^ (1/2) := by
        gcongr
    _ = 2 * K ^ 9 := by
        rpow_ring
        norm_num

/-- Corollary of `better_PFR_conjecture` in which the ambient group is not required to be finite
(but) then $H$ and $c$ are finite. -/
theorem better_PFR_conjecture' {G : Type*} [AddCommGroup G] [Module (ZMod 2) G]
    {A : Set G} {K : ‚Ñù} (h‚ÇÄA : A.Nonempty) (Afin : A.Finite)
    (hA : Nat.card (A + A) ‚â§ K * Nat.card A) :
    ‚àÉ (H : Submodule (ZMod 2) G) (c : Set G), c.Finite ‚àß (H : Set G).Finite ‚àß
      Nat.card c < 2 * K ^ 9 ‚àß Nat.card H ‚â§ Nat.card A ‚àß A ‚äÜ c + H := by
  let G' := Submodule.span (ZMod 2) A
  let G'fin : Fintype G' := (Afin.submoduleSpan _).fintype
  let Œπ : G'‚Üí‚Çó[ZMod 2] G := G'.subtype
  have Œπ_inj : Injective Œπ := G'.toAddSubgroup.subtype_injective
  let A' : Set G' := Œπ ‚Åª¬π' A
  have A_rg : A ‚äÜ range Œπ := by
    simp only [AddMonoidHom.coe_coe, Submodule.coe_subtype, Subtype.range_coe_subtype, G', Œπ]
    exact Submodule.subset_span
  have cardA' : Nat.card A' = Nat.card A := Nat.card_preimage_of_injective Œπ_inj A_rg
  have hA' : Nat.card (A' + A') ‚â§ K * Nat.card A' := by
    rwa [cardA', ‚Üê preimage_add _ Œπ_inj A_rg A_rg,
         Nat.card_preimage_of_injective Œπ_inj (add_subset_range _ A_rg A_rg)]
  rcases better_PFR_conjecture (h‚ÇÄA.preimage' A_rg) hA' with ‚ü®H', c', hc', hH', hH'‚ÇÇ‚ü©
  refine ‚ü®H'.map Œπ , Œπ '' c', toFinite _, toFinite (Œπ '' H'), ?_, ?_, fun x hx ‚Ü¶ ?_‚ü©
  ¬∑ rwa [Nat.card_image_of_injective Œπ_inj]
  ¬∑ erw [Nat.card_image_of_injective Œπ_inj, ‚Üê cardA']
    exact hH'
  ¬∑ erw [‚Üê image_add]
    exact ‚ü®‚ü®x, Submodule.subset_span hx‚ü©, hH'‚ÇÇ hx, rfl‚ü©
